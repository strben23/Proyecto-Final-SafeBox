
PFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  0000142c  000014c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000142c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001e6  008001e6  000015a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002726  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd9  00000000  00000000  00003f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001574  00000000  00000000  00004d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  000062b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e8  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f3  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000089a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3e       	cpi	r26, 0xE6	; 230
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 ee       	ldi	r26, 0xE6	; 230
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3f       	cpi	r26, 0xFD	; 253
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 19 04 	call	0x832	; 0x832 <main>
      9e:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_ConfigPin>:
	if (*pin_reg & (1 << pin)) {
		return HIGH;
		} else {
		return LOW;
	}
}
      a6:	88 23       	and	r24, r24
      a8:	29 f0       	breq	.+10     	; 0xb4 <GPIO_ConfigPin+0xe>
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	31 f0       	breq	.+12     	; 0xba <GPIO_ConfigPin+0x14>
      ae:	82 30       	cpi	r24, 0x02	; 2
      b0:	49 f4       	brne	.+18     	; 0xc4 <GPIO_ConfigPin+0x1e>
      b2:	06 c0       	rjmp	.+12     	; 0xc0 <GPIO_ConfigPin+0x1a>
      b4:	e4 e2       	ldi	r30, 0x24	; 36
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	05 c0       	rjmp	.+10     	; 0xc4 <GPIO_ConfigPin+0x1e>
      ba:	e7 e2       	ldi	r30, 0x27	; 39
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	02 c0       	rjmp	.+4      	; 0xc4 <GPIO_ConfigPin+0x1e>
      c0:	ea e2       	ldi	r30, 0x2A	; 42
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	41 30       	cpi	r20, 0x01	; 1
      c6:	59 f4       	brne	.+22     	; 0xde <GPIO_ConfigPin+0x38>
      c8:	20 81       	ld	r18, Z
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <GPIO_ConfigPin+0x2e>
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	6a 95       	dec	r22
      d6:	e2 f7       	brpl	.-8      	; 0xd0 <GPIO_ConfigPin+0x2a>
      d8:	82 2b       	or	r24, r18
      da:	80 83       	st	Z, r24
      dc:	08 95       	ret
      de:	90 81       	ld	r25, Z
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_ConfigPin+0x44>
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	6a 95       	dec	r22
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_ConfigPin+0x40>
      ee:	42 2f       	mov	r20, r18
      f0:	40 95       	com	r20
      f2:	94 23       	and	r25, r20
      f4:	90 83       	st	Z, r25
      f6:	88 23       	and	r24, r24
      f8:	29 f0       	breq	.+10     	; 0x104 <GPIO_ConfigPin+0x5e>
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	31 f0       	breq	.+12     	; 0x10a <GPIO_ConfigPin+0x64>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	49 f4       	brne	.+18     	; 0x114 <GPIO_ConfigPin+0x6e>
     102:	06 c0       	rjmp	.+12     	; 0x110 <GPIO_ConfigPin+0x6a>
     104:	a5 e2       	ldi	r26, 0x25	; 37
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	05 c0       	rjmp	.+10     	; 0x114 <GPIO_ConfigPin+0x6e>
     10a:	a8 e2       	ldi	r26, 0x28	; 40
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	02 c0       	rjmp	.+4      	; 0x114 <GPIO_ConfigPin+0x6e>
     110:	ab e2       	ldi	r26, 0x2B	; 43
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	8c 91       	ld	r24, X
     116:	28 2b       	or	r18, r24
     118:	2c 93       	st	X, r18
     11a:	08 95       	ret

0000011c <GPIO_EscribirPin>:

void GPIO_EscribirPin(uint8_t puerto, uint8_t pin, uint8_t valor) {
	volatile uint8_t *port_reg;
	
	// Seleccionar registro PORT según el puerto
	if (puerto == PORT_B) {
     11c:	88 23       	and	r24, r24
     11e:	29 f0       	breq	.+10     	; 0x12a <GPIO_EscribirPin+0xe>
		port_reg = &PORTB;
		} else if (puerto == PORT_C) {
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	31 f0       	breq	.+12     	; 0x130 <GPIO_EscribirPin+0x14>
		port_reg = &PORTC;
		} else if (puerto == PORT_D) {
     124:	82 30       	cpi	r24, 0x02	; 2
     126:	49 f4       	brne	.+18     	; 0x13a <GPIO_EscribirPin+0x1e>
     128:	06 c0       	rjmp	.+12     	; 0x136 <GPIO_EscribirPin+0x1a>
void GPIO_EscribirPin(uint8_t puerto, uint8_t pin, uint8_t valor) {
	volatile uint8_t *port_reg;
	
	// Seleccionar registro PORT según el puerto
	if (puerto == PORT_B) {
		port_reg = &PORTB;
     12a:	e5 e2       	ldi	r30, 0x25	; 37
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	05 c0       	rjmp	.+10     	; 0x13a <GPIO_EscribirPin+0x1e>
		} else if (puerto == PORT_C) {
		port_reg = &PORTC;
     130:	e8 e2       	ldi	r30, 0x28	; 40
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	02 c0       	rjmp	.+4      	; 0x13a <GPIO_EscribirPin+0x1e>
		} else if (puerto == PORT_D) {
		port_reg = &PORTD;
     136:	eb e2       	ldi	r30, 0x2B	; 43
     138:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	// Escribir valor al pin
	if (valor == HIGH) {
     13a:	41 30       	cpi	r20, 0x01	; 1
     13c:	59 f4       	brne	.+22     	; 0x154 <GPIO_EscribirPin+0x38>
		*port_reg |= (1 << pin);  // Establecer pin en alto
     13e:	20 81       	ld	r18, Z
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_EscribirPin+0x2e>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	6a 95       	dec	r22
     14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_EscribirPin+0x2a>
     14e:	82 2b       	or	r24, r18
     150:	80 83       	st	Z, r24
     152:	08 95       	ret
		} else {
		*port_reg &= ~(1 << pin); // Establecer pin en bajo
     154:	20 81       	ld	r18, Z
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	02 c0       	rjmp	.+4      	; 0x160 <GPIO_EscribirPin+0x44>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	6a 95       	dec	r22
     162:	e2 f7       	brpl	.-8      	; 0x15c <GPIO_EscribirPin+0x40>
     164:	80 95       	com	r24
     166:	82 23       	and	r24, r18
     168:	80 83       	st	Z, r24
     16a:	08 95       	ret

0000016c <lcd_send_command>:
	lcd_send_command(0x80);
}

void lcd_send_command(uint8_t command)
{
	DATA_BUS |= (command>>2) & 0b00111100;
     16c:	28 b1       	in	r18, 0x08	; 8
     16e:	98 2f       	mov	r25, r24
     170:	96 95       	lsr	r25
     172:	96 95       	lsr	r25
     174:	39 2f       	mov	r19, r25
     176:	3c 73       	andi	r19, 0x3C	; 60
     178:	23 2b       	or	r18, r19
     17a:	28 b9       	out	0x08, r18	; 8
	DATA_BUS &= (command>>2) | 0b11000011;
     17c:	28 b1       	in	r18, 0x08	; 8
     17e:	93 6c       	ori	r25, 0xC3	; 195
     180:	92 23       	and	r25, r18
     182:	98 b9       	out	0x08, r25	; 8
	CTL_BUS &= ~(1<<LCD_RS);
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9e 7f       	andi	r25, 0xFE	; 254
     188:	98 b9       	out	0x08, r25	; 8
	CTL_BUS |= (1<<LCD_EN);
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	92 60       	ori	r25, 0x02	; 2
     18e:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	ef e9       	ldi	r30, 0x9F	; 159
     192:	ff e0       	ldi	r31, 0x0F	; 15
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <lcd_send_command+0x28>
     198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_send_command+0x2e>
     19a:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &= ~(1<<LCD_EN);
     19c:	98 b1       	in	r25, 0x08	; 8
     19e:	9d 7f       	andi	r25, 0xFD	; 253
     1a0:	98 b9       	out	0x08, r25	; 8
     1a2:	ef e9       	ldi	r30, 0x9F	; 159
     1a4:	ff e0       	ldi	r31, 0x0F	; 15
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_send_command+0x3a>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_send_command+0x40>
     1ac:	00 00       	nop
	_delay_ms(1);
	DATA_BUS |= (command<<2) & 0b00111100;
     1ae:	28 b1       	in	r18, 0x08	; 8
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	98 2f       	mov	r25, r24
     1bc:	9c 73       	andi	r25, 0x3C	; 60
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
	DATA_BUS &= (command<<2) | 0b11000011;
     1c2:	98 b1       	in	r25, 0x08	; 8
     1c4:	83 6c       	ori	r24, 0xC3	; 195
     1c6:	89 23       	and	r24, r25
     1c8:	88 b9       	out	0x08, r24	; 8
	CTL_BUS |= (1<<LCD_EN);
     1ca:	88 b1       	in	r24, 0x08	; 8
     1cc:	82 60       	ori	r24, 0x02	; 2
     1ce:	88 b9       	out	0x08, r24	; 8
     1d0:	8f e9       	ldi	r24, 0x9F	; 159
     1d2:	9f e0       	ldi	r25, 0x0F	; 15
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_send_command+0x68>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_send_command+0x6e>
     1da:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &= ~(1<<LCD_EN);
     1dc:	88 b1       	in	r24, 0x08	; 8
     1de:	8d 7f       	andi	r24, 0xFD	; 253
     1e0:	88 b9       	out	0x08, r24	; 8
     1e2:	ef e9       	ldi	r30, 0x9F	; 159
     1e4:	ff e0       	ldi	r31, 0x0F	; 15
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_send_command+0x7a>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_send_command+0x80>
     1ec:	00 00       	nop
     1ee:	08 95       	ret

000001f0 <lcd_init>:

#include "LCD.h"

void lcd_init(void)
{
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
     1f0:	8c e3       	ldi	r24, 0x3C	; 60
     1f2:	87 b9       	out	0x07, r24	; 7
	CTL_DDR |= (1<<LCD_EN) | (1<<LCD_RS);
     1f4:	87 b1       	in	r24, 0x07	; 7
     1f6:	83 60       	ori	r24, 0x03	; 3
     1f8:	87 b9       	out	0x07, r24	; 7
	DATA_BUS = (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
     1fa:	88 e0       	ldi	r24, 0x08	; 8
     1fc:	88 b9       	out	0x08, r24	; 8
	CTL_BUS |= (1<<LCD_EN);
     1fe:	88 b1       	in	r24, 0x08	; 8
     200:	82 60       	ori	r24, 0x02	; 2
     202:	88 b9       	out	0x08, r24	; 8
	CTL_BUS &= ~(1<<LCD_RS);
     204:	88 b1       	in	r24, 0x08	; 8
     206:	8e 7f       	andi	r24, 0xFE	; 254
     208:	88 b9       	out	0x08, r24	; 8
     20a:	8f e9       	ldi	r24, 0x9F	; 159
     20c:	9f e0       	ldi	r25, 0x0F	; 15
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x1e>
     212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x24>
     214:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &= ~(1<<LCD_EN);
     216:	88 b1       	in	r24, 0x08	; 8
     218:	8d 7f       	andi	r24, 0xFD	; 253
     21a:	88 b9       	out	0x08, r24	; 8
     21c:	8f e9       	ldi	r24, 0x9F	; 159
     21e:	9f e0       	ldi	r25, 0x0F	; 15
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x30>
     224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_init+0x36>
     226:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     228:	88 e2       	ldi	r24, 0x28	; 40
     22a:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_send_command>
     22e:	8f e9       	ldi	r24, 0x9F	; 159
     230:	9f e0       	ldi	r25, 0x0F	; 15
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x42>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x48>
     238:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
     23a:	8f e0       	ldi	r24, 0x0F	; 15
     23c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_send_command>
     240:	8f e9       	ldi	r24, 0x9F	; 159
     242:	9f e0       	ldi	r25, 0x0F	; 15
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x54>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x5a>
     24a:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_send_command>
     252:	08 95       	ret

00000254 <lcd_write_character>:
	_delay_ms(1);
}

void lcd_write_character(uint8_t character)
{
	DATA_BUS |= (character>>2) & 0b00111100;
     254:	28 b1       	in	r18, 0x08	; 8
     256:	98 2f       	mov	r25, r24
     258:	96 95       	lsr	r25
     25a:	96 95       	lsr	r25
     25c:	39 2f       	mov	r19, r25
     25e:	3c 73       	andi	r19, 0x3C	; 60
     260:	23 2b       	or	r18, r19
     262:	28 b9       	out	0x08, r18	; 8
	DATA_BUS &= (character>>2) | 0b11000011;
     264:	28 b1       	in	r18, 0x08	; 8
     266:	93 6c       	ori	r25, 0xC3	; 195
     268:	92 23       	and	r25, r18
     26a:	98 b9       	out	0x08, r25	; 8
	CTL_BUS |= (1<<LCD_RS);
     26c:	98 b1       	in	r25, 0x08	; 8
     26e:	91 60       	ori	r25, 0x01	; 1
     270:	98 b9       	out	0x08, r25	; 8
	CTL_BUS |= (1<<LCD_EN);
     272:	98 b1       	in	r25, 0x08	; 8
     274:	92 60       	ori	r25, 0x02	; 2
     276:	98 b9       	out	0x08, r25	; 8
     278:	ef e3       	ldi	r30, 0x3F	; 63
     27a:	ff e1       	ldi	r31, 0x1F	; 31
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_write_character+0x28>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_write_character+0x2e>
     282:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &= ~(1<<LCD_EN);
     284:	98 b1       	in	r25, 0x08	; 8
     286:	9d 7f       	andi	r25, 0xFD	; 253
     288:	98 b9       	out	0x08, r25	; 8
     28a:	ef e3       	ldi	r30, 0x3F	; 63
     28c:	ff e1       	ldi	r31, 0x1F	; 31
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <lcd_write_character+0x3a>
     292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_write_character+0x40>
     294:	00 00       	nop
	_delay_ms(2);
	DATA_BUS |= (character<<2) & 0b00111100;
     296:	28 b1       	in	r18, 0x08	; 8
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	98 2f       	mov	r25, r24
     2a4:	9c 73       	andi	r25, 0x3C	; 60
     2a6:	92 2b       	or	r25, r18
     2a8:	98 b9       	out	0x08, r25	; 8
	DATA_BUS &= (character<<2) | 0b11000011;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	83 6c       	ori	r24, 0xC3	; 195
     2ae:	89 23       	and	r24, r25
     2b0:	88 b9       	out	0x08, r24	; 8
	CTL_BUS |= (1<<LCD_EN);
     2b2:	88 b1       	in	r24, 0x08	; 8
     2b4:	82 60       	ori	r24, 0x02	; 2
     2b6:	88 b9       	out	0x08, r24	; 8
     2b8:	8f e3       	ldi	r24, 0x3F	; 63
     2ba:	9f e1       	ldi	r25, 0x1F	; 31
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_write_character+0x68>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_write_character+0x6e>
     2c2:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &= ~(1<<LCD_EN);
     2c4:	88 b1       	in	r24, 0x08	; 8
     2c6:	8d 7f       	andi	r24, 0xFD	; 253
     2c8:	88 b9       	out	0x08, r24	; 8
     2ca:	ef e3       	ldi	r30, 0x3F	; 63
     2cc:	ff e1       	ldi	r31, 0x1F	; 31
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_write_character+0x7a>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcd_write_character+0x80>
     2d4:	00 00       	nop
     2d6:	08 95       	ret

000002d8 <lcd_write_word>:
	_delay_ms(2);
}

void lcd_write_word(uint8_t word[20])
{
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	8c 01       	movw	r16, r24
	int i = 0;
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
	while(word[i] != '\0')
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
     2e8:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_write_character>
		i++;
     2ec:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_write_word(uint8_t word[20])
{
	int i = 0;
	while(word[i] != '\0')
     2ee:	f8 01       	movw	r30, r16
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	80 81       	ld	r24, Z
     2f6:	81 11       	cpse	r24, r1
     2f8:	f7 cf       	rjmp	.-18     	; 0x2e8 <lcd_write_word+0x10>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret

00000304 <lcd_clear>:

void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_send_command>
     30a:	8f e1       	ldi	r24, 0x1F	; 31
     30c:	9e e4       	ldi	r25, 0x4E	; 78
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <lcd_clear+0xa>
     312:	00 c0       	rjmp	.+0      	; 0x314 <lcd_clear+0x10>
     314:	00 00       	nop
     316:	08 95       	ret

00000318 <lcd_goto_xy>:
	_delay_ms(5);
}

void lcd_goto_xy(uint8_t line, uint8_t pos)
{
	lcd_send_command((0x80 | (line << 6)) + pos);
     318:	20 e4       	ldi	r18, 0x40	; 64
     31a:	82 9f       	mul	r24, r18
     31c:	c0 01       	movw	r24, r0
     31e:	11 24       	eor	r1, r1
     320:	80 68       	ori	r24, 0x80	; 128
     322:	86 0f       	add	r24, r22
     324:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     328:	87 ec       	ldi	r24, 0xC7	; 199
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_goto_xy+0x14>
     330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_goto_xy+0x1a>
     332:	00 00       	nop
     334:	08 95       	ret

00000336 <EEPROM_read>:
	while (*string != 0)
	{
		UART_write(*string);
		string++;
	}
}
     336:	f9 99       	sbic	0x1f, 1	; 31
     338:	fe cf       	rjmp	.-4      	; 0x336 <EEPROM_read>
     33a:	92 bd       	out	0x22, r25	; 34
     33c:	81 bd       	out	0x21, r24	; 33
     33e:	8f b3       	in	r24, 0x1f	; 31
     340:	81 60       	ori	r24, 0x01	; 1
     342:	8f bb       	out	0x1f, r24	; 31
     344:	80 b5       	in	r24, 0x20	; 32
     346:	08 95       	ret

00000348 <EEPROM_write>:
     348:	f9 99       	sbic	0x1f, 1	; 31
     34a:	fe cf       	rjmp	.-4      	; 0x348 <EEPROM_write>
     34c:	92 bd       	out	0x22, r25	; 34
     34e:	81 bd       	out	0x21, r24	; 33
     350:	60 bd       	out	0x20, r22	; 32
     352:	8f b3       	in	r24, 0x1f	; 31
     354:	84 60       	ori	r24, 0x04	; 4
     356:	8f bb       	out	0x1f, r24	; 31
     358:	8f b3       	in	r24, 0x1f	; 31
     35a:	82 60       	ori	r24, 0x02	; 2
     35c:	8f bb       	out	0x1f, r24	; 31
     35e:	08 95       	ret

00000360 <EEPROM_update>:
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
     368:	16 2f       	mov	r17, r22
     36a:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_read>
     36e:	81 17       	cp	r24, r17
     370:	21 f0       	breq	.+8      	; 0x37a <EEPROM_update+0x1a>
     372:	61 2f       	mov	r22, r17
     374:	ce 01       	movw	r24, r28
     376:	0e 94 a4 01 	call	0x348	; 0x348 <EEPROM_write>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	08 95       	ret

00000382 <timer1_init>:

void timer1_init() {
	// Prescaler de 1024
	// Frecuencia del timer: 16MHz / 1024 = 15625 Hz
	// Para 1s = 15625 ciclos
	TCCR1A = 0;
     382:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC + prescaler 1024
     386:	8d e0       	ldi	r24, 0x0D	; 13
     388:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 15625; // 1Hz/1s
     38c:	89 e0       	ldi	r24, 0x09	; 9
     38e:	9d e3       	ldi	r25, 0x3D	; 61
     390:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     394:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilita interrupción por comparación
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     39e:	08 95       	ret

000003a0 <__vector_11>:
}


ISR(TIMER1_COMPA_vect) {
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	0f 92       	push	r0
     3a8:	11 24       	eor	r1, r1
     3aa:	8f 93       	push	r24
	contadorSegundosReal++;
     3ac:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <contadorSegundosReal>
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <contadorSegundosReal>

	if (contadorSegundosReal >= 10) {
     3b6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <contadorSegundosReal>
     3ba:	8a 30       	cpi	r24, 0x0A	; 10
     3bc:	d0 f0       	brcs	.+52     	; 0x3f2 <__vector_11+0x52>
		contadorSegundosReal = 0;
     3be:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <contadorSegundosReal>

		minuto++;
     3c2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <minuto>
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <minuto>
		segundo = 0;  // Reiniciamos segundos simulados (si se muestran)
     3cc:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <segundo>

		if (minuto >= 60) {
     3d0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <minuto>
     3d4:	8c 33       	cpi	r24, 0x3C	; 60
     3d6:	68 f0       	brcs	.+26     	; 0x3f2 <__vector_11+0x52>
			minuto = 0;
     3d8:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <minuto>
			hora++;
     3dc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <hora>
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <hora>

			if (hora >= 24) {
     3e6:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <hora>
     3ea:	88 31       	cpi	r24, 0x18	; 24
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <__vector_11+0x52>
				hora = 0;
     3ee:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <hora>
			}
		}
	}
	
	actualizarHora = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <actualizarHora>
}
     3f8:	8f 91       	pop	r24
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <MFRC522_resetPinInit>:

void MFRC522_resetPinInit() {
	RST_DDR |= (1 << RST_PIN);     // RST as output
     404:	84 b1       	in	r24, 0x04	; 4
     406:	82 60       	ori	r24, 0x02	; 2
     408:	84 b9       	out	0x04, r24	; 4
	RST_PORT |= (1 << RST_PIN);    // RST high
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	82 60       	ori	r24, 0x02	; 2
     40e:	85 b9       	out	0x05, r24	; 5
     410:	08 95       	ret

00000412 <read_rfid_tag>:
}

uint8_t read_rfid_tag(void) {
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	00 d0       	rcall	.+0      	; 0x418 <read_rfid_tag+0x6>
     418:	00 d0       	rcall	.+0      	; 0x41a <read_rfid_tag+0x8>
     41a:	00 d0       	rcall	.+0      	; 0x41c <read_rfid_tag+0xa>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	uint8_t uid[4];
	uint8_t tagType[2];

	if (MFRC522_request(0x26, tagType)) {
     420:	be 01       	movw	r22, r28
     422:	6b 5f       	subi	r22, 0xFB	; 251
     424:	7f 4f       	sbci	r23, 0xFF	; 255
     426:	86 e2       	ldi	r24, 0x26	; 38
     428:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <MFRC522_request>
     42c:	88 23       	and	r24, r24
     42e:	a1 f0       	breq	.+40     	; 0x458 <read_rfid_tag+0x46>
		if (MFRC522_anticoll(uid)) {
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	0e 94 86 06 	call	0xd0c	; 0xd0c <MFRC522_anticoll>
     438:	88 23       	and	r24, r24
     43a:	81 f0       	breq	.+32     	; 0x45c <read_rfid_tag+0x4a>
			memcpy(saved_uid, uid, 4); // Save UID globally
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	ab 81       	ldd	r26, Y+3	; 0x03
     442:	bc 81       	ldd	r27, Y+4	; 0x04
     444:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <saved_uid>
     448:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <saved_uid+0x1>
     44c:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <saved_uid+0x2>
     450:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <saved_uid+0x3>
			return 1; // Success
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	03 c0       	rjmp	.+6      	; 0x45e <read_rfid_tag+0x4c>
		}
	}
	return 0; // Failure
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <read_rfid_tag+0x4c>
     45c:	80 e0       	ldi	r24, 0x00	; 0
}
     45e:	26 96       	adiw	r28, 0x06	; 6
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <compare_uids>:

uint8_t compare_uids(uint8_t *uid1, uint8_t *uid2) {
     470:	dc 01       	movw	r26, r24
	for (uint8_t i = 0; i < 4; i++) {
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0d c0       	rjmp	.+26     	; 0x490 <compare_uids+0x20>
		if (uid1[i] != uid2[i])
     476:	29 2f       	mov	r18, r25
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	fd 01       	movw	r30, r26
     47c:	e2 0f       	add	r30, r18
     47e:	f3 1f       	adc	r31, r19
     480:	40 81       	ld	r20, Z
     482:	fb 01       	movw	r30, r22
     484:	e2 0f       	add	r30, r18
     486:	f3 1f       	adc	r31, r19
     488:	20 81       	ld	r18, Z
     48a:	42 13       	cpse	r20, r18
     48c:	05 c0       	rjmp	.+10     	; 0x498 <compare_uids+0x28>
	}
	return 0; // Failure
}

uint8_t compare_uids(uint8_t *uid1, uint8_t *uid2) {
	for (uint8_t i = 0; i < 4; i++) {
     48e:	9f 5f       	subi	r25, 0xFF	; 255
     490:	94 30       	cpi	r25, 0x04	; 4
     492:	88 f3       	brcs	.-30     	; 0x476 <compare_uids+0x6>
		if (uid1[i] != uid2[i])
		return 0; // Not equal
	}
	return 1; // Equal
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	08 95       	ret
}

uint8_t compare_uids(uint8_t *uid1, uint8_t *uid2) {
	for (uint8_t i = 0; i < 4; i++) {
		if (uid1[i] != uid2[i])
		return 0; // Not equal
     498:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1; // Equal
}
     49a:	08 95       	ret

0000049c <PressedKey>:
char PressedKey(void) {
	static uint8_t keyReleased = 1; // Bandera que indica si se soltó la tecla anterior
	char key = 0;

	// Escanea cada fila del teclado
	PORTD = 0b11110111; _delay_ms(1);
     49c:	87 ef       	ldi	r24, 0xF7	; 247
     49e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	89 ef       	ldi	r24, 0xF9	; 249
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <PressedKey+0x8>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <PressedKey+0xe>
     4aa:	00 00       	nop
	if (!(PIND & (1 << PIND7))) key = '1';
     4ac:	4f 9b       	sbis	0x09, 7	; 9
     4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <PressedKey+0x24>
	else if (!(PIND & (1 << PIND6))) key = '4';
     4b0:	4e 9b       	sbis	0x09, 6	; 9
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <PressedKey+0x28>
	else if (!(PIND & (1 << PIND5))) key = '7';
     4b4:	4d 9b       	sbis	0x09, 5	; 9
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <PressedKey+0x2c>
	else if (!(PIND & (1 << PIND4))) key = '*';
     4b8:	4c 9b       	sbis	0x09, 4	; 9
     4ba:	08 c0       	rjmp	.+16     	; 0x4cc <PressedKey+0x30>
	return 1; // Equal
}

char PressedKey(void) {
	static uint8_t keyReleased = 1; // Bandera que indica si se soltó la tecla anterior
	char key = 0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <PressedKey+0x32>

	// Escanea cada fila del teclado
	PORTD = 0b11110111; _delay_ms(1);
	if (!(PIND & (1 << PIND7))) key = '1';
     4c0:	81 e3       	ldi	r24, 0x31	; 49
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <PressedKey+0x32>
	else if (!(PIND & (1 << PIND6))) key = '4';
     4c4:	84 e3       	ldi	r24, 0x34	; 52
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <PressedKey+0x32>
	else if (!(PIND & (1 << PIND5))) key = '7';
     4c8:	87 e3       	ldi	r24, 0x37	; 55
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <PressedKey+0x32>
	else if (!(PIND & (1 << PIND4))) key = '*';
     4cc:	8a e2       	ldi	r24, 0x2A	; 42

	if (!key) {
     4ce:	81 11       	cpse	r24, r1
     4d0:	18 c0       	rjmp	.+48     	; 0x502 <PressedKey+0x66>
		PORTD = 0b11111011; _delay_ms(1);
     4d2:	9b ef       	ldi	r25, 0xFB	; 251
     4d4:	9b b9       	out	0x0b, r25	; 11
     4d6:	e9 ef       	ldi	r30, 0xF9	; 249
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <PressedKey+0x3e>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <PressedKey+0x44>
     4e0:	00 00       	nop
		if (!(PIND & (1 << PIND7))) key = '2';
     4e2:	4f 9b       	sbis	0x09, 7	; 9
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <PressedKey+0x58>
		else if (!(PIND & (1 << PIND6))) key = '5';
     4e6:	4e 9b       	sbis	0x09, 6	; 9
     4e8:	07 c0       	rjmp	.+14     	; 0x4f8 <PressedKey+0x5c>
		else if (!(PIND & (1 << PIND5))) key = '8';
     4ea:	4d 9b       	sbis	0x09, 5	; 9
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <PressedKey+0x60>
		else if (!(PIND & (1 << PIND4))) key = '0';
     4ee:	4c 9b       	sbis	0x09, 4	; 9
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <PressedKey+0x64>
     4f2:	07 c0       	rjmp	.+14     	; 0x502 <PressedKey+0x66>
	else if (!(PIND & (1 << PIND5))) key = '7';
	else if (!(PIND & (1 << PIND4))) key = '*';

	if (!key) {
		PORTD = 0b11111011; _delay_ms(1);
		if (!(PIND & (1 << PIND7))) key = '2';
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <PressedKey+0x66>
		else if (!(PIND & (1 << PIND6))) key = '5';
     4f8:	85 e3       	ldi	r24, 0x35	; 53
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <PressedKey+0x66>
		else if (!(PIND & (1 << PIND5))) key = '8';
     4fc:	88 e3       	ldi	r24, 0x38	; 56
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <PressedKey+0x66>
		else if (!(PIND & (1 << PIND4))) key = '0';
     500:	80 e3       	ldi	r24, 0x30	; 48
	}

	if (!key) {
     502:	81 11       	cpse	r24, r1
     504:	18 c0       	rjmp	.+48     	; 0x536 <PressedKey+0x9a>
		PORTD = 0b11111101; _delay_ms(1);
     506:	9d ef       	ldi	r25, 0xFD	; 253
     508:	9b b9       	out	0x0b, r25	; 11
     50a:	e9 ef       	ldi	r30, 0xF9	; 249
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <PressedKey+0x72>
     512:	00 c0       	rjmp	.+0      	; 0x514 <PressedKey+0x78>
     514:	00 00       	nop
		if (!(PIND & (1 << PIND7))) key = '3';
     516:	4f 9b       	sbis	0x09, 7	; 9
     518:	07 c0       	rjmp	.+14     	; 0x528 <PressedKey+0x8c>
		else if (!(PIND & (1 << PIND6))) key = '6';
     51a:	4e 9b       	sbis	0x09, 6	; 9
     51c:	07 c0       	rjmp	.+14     	; 0x52c <PressedKey+0x90>
		else if (!(PIND & (1 << PIND5))) key = '9';
     51e:	4d 9b       	sbis	0x09, 5	; 9
     520:	07 c0       	rjmp	.+14     	; 0x530 <PressedKey+0x94>
		else if (!(PIND & (1 << PIND4))) key = '#';
     522:	4c 9b       	sbis	0x09, 4	; 9
     524:	07 c0       	rjmp	.+14     	; 0x534 <PressedKey+0x98>
     526:	07 c0       	rjmp	.+14     	; 0x536 <PressedKey+0x9a>
		else if (!(PIND & (1 << PIND4))) key = '0';
	}

	if (!key) {
		PORTD = 0b11111101; _delay_ms(1);
		if (!(PIND & (1 << PIND7))) key = '3';
     528:	83 e3       	ldi	r24, 0x33	; 51
     52a:	05 c0       	rjmp	.+10     	; 0x536 <PressedKey+0x9a>
		else if (!(PIND & (1 << PIND6))) key = '6';
     52c:	86 e3       	ldi	r24, 0x36	; 54
     52e:	03 c0       	rjmp	.+6      	; 0x536 <PressedKey+0x9a>
		else if (!(PIND & (1 << PIND5))) key = '9';
     530:	89 e3       	ldi	r24, 0x39	; 57
     532:	01 c0       	rjmp	.+2      	; 0x536 <PressedKey+0x9a>
		else if (!(PIND & (1 << PIND4))) key = '#';
     534:	83 e2       	ldi	r24, 0x23	; 35
	}

	if (!key) {
     536:	81 11       	cpse	r24, r1
     538:	18 c0       	rjmp	.+48     	; 0x56a <PressedKey+0xce>
		PORTD = 0b11111110; _delay_ms(1);
     53a:	9e ef       	ldi	r25, 0xFE	; 254
     53c:	9b b9       	out	0x0b, r25	; 11
     53e:	e9 ef       	ldi	r30, 0xF9	; 249
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <PressedKey+0xa6>
     546:	00 c0       	rjmp	.+0      	; 0x548 <PressedKey+0xac>
     548:	00 00       	nop
		if (!(PIND & (1 << PIND7))) key = 'A';
     54a:	4f 9b       	sbis	0x09, 7	; 9
     54c:	07 c0       	rjmp	.+14     	; 0x55c <PressedKey+0xc0>
		else if (!(PIND & (1 << PIND6))) key = 'B';
     54e:	4e 9b       	sbis	0x09, 6	; 9
     550:	07 c0       	rjmp	.+14     	; 0x560 <PressedKey+0xc4>
		else if (!(PIND & (1 << PIND5))) key = 'C';
     552:	4d 9b       	sbis	0x09, 5	; 9
     554:	07 c0       	rjmp	.+14     	; 0x564 <PressedKey+0xc8>
		else if (!(PIND & (1 << PIND4))) key = 'D';
     556:	4c 9b       	sbis	0x09, 4	; 9
     558:	07 c0       	rjmp	.+14     	; 0x568 <PressedKey+0xcc>
     55a:	07 c0       	rjmp	.+14     	; 0x56a <PressedKey+0xce>
		else if (!(PIND & (1 << PIND4))) key = '#';
	}

	if (!key) {
		PORTD = 0b11111110; _delay_ms(1);
		if (!(PIND & (1 << PIND7))) key = 'A';
     55c:	81 e4       	ldi	r24, 0x41	; 65
     55e:	05 c0       	rjmp	.+10     	; 0x56a <PressedKey+0xce>
		else if (!(PIND & (1 << PIND6))) key = 'B';
     560:	82 e4       	ldi	r24, 0x42	; 66
     562:	03 c0       	rjmp	.+6      	; 0x56a <PressedKey+0xce>
		else if (!(PIND & (1 << PIND5))) key = 'C';
     564:	83 e4       	ldi	r24, 0x43	; 67
     566:	01 c0       	rjmp	.+2      	; 0x56a <PressedKey+0xce>
		else if (!(PIND & (1 << PIND4))) key = 'D';
     568:	84 e4       	ldi	r24, 0x44	; 68
	}

	// Lógica de detección de nueva pulsación
	if (key && keyReleased) {
     56a:	88 23       	and	r24, r24
     56c:	39 f0       	breq	.+14     	; 0x57c <PressedKey+0xe0>
     56e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     572:	99 23       	and	r25, r25
     574:	19 f0       	breq	.+6      	; 0x57c <PressedKey+0xe0>
		keyReleased = 0;
     576:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		return key;
     57a:	08 95       	ret
	}

	// Si ya no se detecta ninguna tecla, marcamos como liberada
	if (!key) {
     57c:	81 11       	cpse	r24, r1
     57e:	05 c0       	rjmp	.+10     	; 0x58a <PressedKey+0xee>
		keyReleased = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	return 'A';
     586:	81 e4       	ldi	r24, 0x41	; 65
     588:	08 95       	ret
     58a:	81 e4       	ldi	r24, 0x41	; 65
}
     58c:	08 95       	ret

0000058e <cambiarPasswd>:
		_delay_ms(2000);
		mensajeHoraPasswd();
	}
}

void cambiarPasswd(uint8_t newPasswd[]){
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	8c 01       	movw	r16, r24
	uint8_t contadorCorrecto = 0;
	
	for (uint8_t i=0; i<4; i++){
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	09 c0       	rjmp	.+18     	; 0x5ac <cambiarPasswd+0x1e>
		EEPROM_update(i, newPasswd[i]);
     59a:	8c 2f       	mov	r24, r28
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	f8 01       	movw	r30, r16
     5a0:	e8 0f       	add	r30, r24
     5a2:	f9 1f       	adc	r31, r25
     5a4:	60 81       	ld	r22, Z
     5a6:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_update>
}

void cambiarPasswd(uint8_t newPasswd[]){
	uint8_t contadorCorrecto = 0;
	
	for (uint8_t i=0; i<4; i++){
     5aa:	cf 5f       	subi	r28, 0xFF	; 255
     5ac:	c4 30       	cpi	r28, 0x04	; 4
     5ae:	a8 f3       	brcs	.-22     	; 0x59a <cambiarPasswd+0xc>
		EEPROM_update(i, newPasswd[i]);
	}
}
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	08 95       	ret

000005b8 <mensajeHoraPasswd>:

void mensajeHoraPasswd(void){
	lcd_clear();
     5b8:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
	lcd_goto_xy(1, 0);
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("Hour: ");
     5c4:	89 e0       	ldi	r24, 0x09	; 9
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
	lcd_goto_xy(0,0);
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("Password: ");
     5d4:	80 e1       	ldi	r24, 0x10	; 16
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
     5dc:	08 95       	ret

000005de <cerrarPuerta>:
	
	actualizarHistorial();
}

void cerrarPuerta(void){
	puertaAbierta = false;
     5de:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <puertaAbierta>
	
	//Logica cerrar puerta
	servoAngulo(160);
     5e2:	80 ea       	ldi	r24, 0xA0	; 160
     5e4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <servoAngulo>
	
	mensajeHoraPasswd();
     5e8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
     5ec:	08 95       	ret

000005ee <actualizarIndiceHistorial>:
	
}


void actualizarIndiceHistorial(uint8_t idx){
	if (idx < MAX_HISTORIAL){
     5ee:	84 31       	cpi	r24, 0x14	; 20
     5f0:	18 f4       	brcc	.+6      	; 0x5f8 <actualizarIndiceHistorial+0xa>
		idx++;
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	68 0f       	add	r22, r24
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <actualizarIndiceHistorial+0xc>
	} else{
		idx = 0;
     5f8:	60 e0       	ldi	r22, 0x00	; 0
	}
	EEPROM_update(HISTORIAL_INDICE, idx);
     5fa:	89 e0       	ldi	r24, 0x09	; 9
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_update>
     602:	08 95       	ret

00000604 <actualizarHistorial>:
}

void actualizarHistorial(){
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
	uint8_t indice = EEPROM_read(HISTORIAL_INDICE);
     60a:	89 e0       	ldi	r24, 0x09	; 9
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_read>
     612:	18 2f       	mov	r17, r24
	uint16_t direccion = HISTORIAL_START + (indice * 2);
     614:	c8 2f       	mov	r28, r24
     616:	d0 e0       	ldi	r29, 0x00	; 0
     618:	25 96       	adiw	r28, 0x05	; 5
     61a:	cc 0f       	add	r28, r28
     61c:	dd 1f       	adc	r29, r29
	
	EEPROM_update(direccion, hora);
     61e:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <hora>
     622:	ce 01       	movw	r24, r28
     624:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_update>
	EEPROM_update(direccion+1, minuto);
     628:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <minuto>
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	0e 94 b0 01 	call	0x360	; 0x360 <EEPROM_update>
	
	actualizarIndiceHistorial(indice);	
     634:	81 2f       	mov	r24, r17
     636:	0e 94 f7 02 	call	0x5ee	; 0x5ee <actualizarIndiceHistorial>
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	08 95       	ret

00000642 <abrirPuerta>:
	lcd_goto_xy(0,0);
	lcd_write_word("Password: ");
}

void abrirPuerta(void){
	puertaAbierta = true;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <puertaAbierta>
	
	//Logica abrir puerta
	
	lcd_clear();
     648:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
	lcd_goto_xy(0,0);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("Status Door:");
     654:	8b e1       	ldi	r24, 0x1B	; 27
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
	lcd_goto_xy(1,0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("OPEN");
     664:	88 e2       	ldi	r24, 0x28	; 40
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
	GPIO_EscribirPin(PORTD, 0, HIGH);
     66c:	8b b1       	in	r24, 0x0b	; 11
     66e:	41 e0       	ldi	r20, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	0e 94 8e 00 	call	0x11c	; 0x11c <GPIO_EscribirPin>
	servoAngulo(37);
     676:	85 e2       	ldi	r24, 0x25	; 37
     678:	0e 94 d5 06 	call	0xdaa	; 0xdaa <servoAngulo>
	
	actualizarHistorial();
     67c:	0e 94 02 03 	call	0x604	; 0x604 <actualizarHistorial>
     680:	08 95       	ret

00000682 <validarPasswd>:
	}

	return 'A';
}

void validarPasswd(uint8_t passwd[]){
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	7c 01       	movw	r14, r24
	uint8_t contadorCorrecto = 0;
	
	for (uint8_t i=0; i<4; i++){
     690:	10 e0       	ldi	r17, 0x00	; 0

	return 'A';
}

void validarPasswd(uint8_t passwd[]){
	uint8_t contadorCorrecto = 0;
     692:	00 e0       	ldi	r16, 0x00	; 0
	
	for (uint8_t i=0; i<4; i++){
     694:	0c c0       	rjmp	.+24     	; 0x6ae <validarPasswd+0x2c>
		if (EEPROM_read(i) == passwd[i])
     696:	c1 2f       	mov	r28, r17
     698:	d0 e0       	ldi	r29, 0x00	; 0
     69a:	ce 01       	movw	r24, r28
     69c:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_read>
     6a0:	ce 0d       	add	r28, r14
     6a2:	df 1d       	adc	r29, r15
     6a4:	98 81       	ld	r25, Y
     6a6:	89 13       	cpse	r24, r25
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <validarPasswd+0x2a>
			contadorCorrecto++;
     6aa:	0f 5f       	subi	r16, 0xFF	; 255
}

void validarPasswd(uint8_t passwd[]){
	uint8_t contadorCorrecto = 0;
	
	for (uint8_t i=0; i<4; i++){
     6ac:	1f 5f       	subi	r17, 0xFF	; 255
     6ae:	14 30       	cpi	r17, 0x04	; 4
     6b0:	90 f3       	brcs	.-28     	; 0x696 <validarPasswd+0x14>
		if (EEPROM_read(i) == passwd[i])
			contadorCorrecto++;
	}
	
	if (contadorCorrecto == 4){
     6b2:	04 30       	cpi	r16, 0x04	; 4
     6b4:	a9 f4       	brne	.+42     	; 0x6e0 <validarPasswd+0x5e>
		lcd_clear();
     6b6:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
		lcd_goto_xy(0,0);
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
		lcd_write_word("Succesful Code!");
     6c2:	8d e2       	ldi	r24, 0x2D	; 45
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
		lcd_goto_xy(1,0);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
		lcd_write_word("Opening Door...");
     6d2:	8d e3       	ldi	r24, 0x3D	; 61
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
		abrirPuerta();
     6da:	0e 94 21 03 	call	0x642	; 0x642 <abrirPuerta>
     6de:	1d c0       	rjmp	.+58     	; 0x71a <validarPasswd+0x98>
	} else{
		lcd_clear();
     6e0:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
		lcd_goto_xy(0,0);
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
		lcd_write_word("Incorrect Code!");
     6ec:	8d e4       	ldi	r24, 0x4D	; 77
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
		lcd_goto_xy(1,0);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
		lcd_write_word("Try again...");
     6fc:	8d e5       	ldi	r24, 0x5D	; 93
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
     704:	2f e7       	ldi	r18, 0x7F	; 127
     706:	8a e1       	ldi	r24, 0x1A	; 26
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <validarPasswd+0x88>
     712:	00 c0       	rjmp	.+0      	; 0x714 <validarPasswd+0x92>
     714:	00 00       	nop
		_delay_ms(2000);
		mensajeHoraPasswd();
     716:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
	}
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	08 95       	ret

00000728 <leerHistorial>:
	EEPROM_update(direccion+1, minuto);
	
	actualizarIndiceHistorial(indice);	
}

void leerHistorial(){
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2c 97       	sbiw	r28, 0x0c	; 12
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	leyendoHistorial = true;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
	uint8_t c = 1;
	uint8_t hr, min;
	char key = 'A';
	char horaHistorial[12];
	
	lcd_clear();
     74c:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
	lcd_goto_xy(0,0);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("Entry History");
     758:	8a e6       	ldi	r24, 0x6A	; 106
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
	lcd_goto_xy(1,0);
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
	lcd_write_word("Press '#': Next");
     768:	88 e7       	ldi	r24, 0x78	; 120
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
}

void leerHistorial(){
	leyendoHistorial = true;
	uint8_t indiceLectura = 0;
	uint8_t c = 1;
     770:	dd 24       	eor	r13, r13
     772:	d3 94       	inc	r13
	actualizarIndiceHistorial(indice);	
}

void leerHistorial(){
	leyendoHistorial = true;
	uint8_t indiceLectura = 0;
     774:	e1 2c       	mov	r14, r1
	lcd_write_word("Entry History");
	lcd_goto_xy(1,0);
	lcd_write_word("Press '#': Next");
	
	while (1){
		key = PressedKey();
     776:	0e 94 4e 02 	call	0x49c	; 0x49c <PressedKey>
		
		if (key == '#'){
     77a:	83 32       	cpi	r24, 0x23	; 35
     77c:	e1 f7       	brne	.-8      	; 0x776 <leerHistorial+0x4e>
			hr = EEPROM_read(HISTORIAL_START + (indiceLectura * 2));
     77e:	0e 2d       	mov	r16, r14
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	0b 5f       	subi	r16, 0xFB	; 251
     784:	1f 4f       	sbci	r17, 0xFF	; 255
     786:	00 0f       	add	r16, r16
     788:	11 1f       	adc	r17, r17
     78a:	c8 01       	movw	r24, r16
     78c:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_read>
     790:	f8 2e       	mov	r15, r24
			min = EEPROM_read((HISTORIAL_START + (indiceLectura * 2))+1);
     792:	c8 01       	movw	r24, r16
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_read>
     79a:	18 2f       	mov	r17, r24
			
			if (hr <= 24 && min <= 60){
     79c:	28 e1       	ldi	r18, 0x18	; 24
     79e:	2f 15       	cp	r18, r15
     7a0:	28 f1       	brcs	.+74     	; 0x7ec <leerHistorial+0xc4>
     7a2:	8d 33       	cpi	r24, 0x3D	; 61
     7a4:	18 f5       	brcc	.+70     	; 0x7ec <leerHistorial+0xc4>
				lcd_goto_xy(1,0);
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				snprintf(horaHistorial, sizeof(horaHistorial), "%u. %02u:%02u      ", c, hr, min);
     7ae:	1f 92       	push	r1
     7b0:	1f 93       	push	r17
     7b2:	1f 92       	push	r1
     7b4:	ff 92       	push	r15
     7b6:	1f 92       	push	r1
     7b8:	df 92       	push	r13
     7ba:	88 e8       	ldi	r24, 0x88	; 136
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	1f 92       	push	r1
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	8f 93       	push	r24
     7c8:	8e 01       	movw	r16, r28
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	1f 93       	push	r17
     7d0:	0f 93       	push	r16
     7d2:	0e 94 1c 07 	call	0xe38	; 0xe38 <snprintf>
				lcd_write_word(horaHistorial);
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
				indiceLectura++;
     7dc:	e3 94       	inc	r14
				c++;
     7de:	d3 94       	inc	r13
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	c5 cf       	rjmp	.-118    	; 0x776 <leerHistorial+0x4e>
			} else{
				lcd_goto_xy(1,0);
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				lcd_write_word("END             ");
     7f4:	8c e9       	ldi	r24, 0x9C	; 156
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
     7fc:	9f e7       	ldi	r25, 0x7F	; 127
     7fe:	2a e1       	ldi	r18, 0x1A	; 26
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	91 50       	subi	r25, 0x01	; 1
     804:	20 40       	sbci	r18, 0x00	; 0
     806:	80 40       	sbci	r24, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
				break;
			}
			key = 'A';
		}
	}
	mensajeHoraPasswd();
     80e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
	leyendoHistorial = false;
     812:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
}
     816:	2c 96       	adiw	r28, 0x0c	; 12
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	08 95       	ret

00000832 <main>:
uint8_t known_uid[4] = {0x3E, 0x1B, 0xED, 0x00};
uint8_t known_uid2[4] = {0x08, 0x13, 0x24, 0x91};



int main(void){
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	28 97       	sbiw	r28, 0x08	; 8
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
	// Inicializacion de puerto D para Teclado Matricial 4x4
	DDRD |=0b00001111; //D0-D3 outputs
     846:	8a b1       	in	r24, 0x0a	; 10
     848:	8f 60       	ori	r24, 0x0F	; 15
     84a:	8a b9       	out	0x0a, r24	; 10
	DDRD &=0b00001111; //D4-D7 inputs
     84c:	8a b1       	in	r24, 0x0a	; 10
     84e:	8f 70       	andi	r24, 0x0F	; 15
     850:	8a b9       	out	0x0a, r24	; 10
	PORTD |=0b11110000; //D4-D7 Pull ups
     852:	8b b1       	in	r24, 0x0b	; 11
     854:	80 6f       	ori	r24, 0xF0	; 240
     856:	8b b9       	out	0x0b, r24	; 11
	PORTD |=0b00001111; //D0-D3 outputs high
     858:	8b b1       	in	r24, 0x0b	; 11
     85a:	8f 60       	ori	r24, 0x0F	; 15
     85c:	8b b9       	out	0x0b, r24	; 11
	GPIO_ConfigPin(PORT_D, 0, OUTPUT);
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_ConfigPin>
	PORTD &= ~(1 << PORTD0); 
     868:	8b b1       	in	r24, 0x0b	; 11
     86a:	8e 7f       	andi	r24, 0xFE	; 254
     86c:	8b b9       	out	0x0b, r24	; 11
	char pressedKey = 'A'; // Inicializa variable de lectura de tecla presionada
	
	lcd_init(); // Inicializacion de LCD 16x2
     86e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_init>
	timer1_init(); // Inicializacion de Timer para la hora
     872:	0e 94 c1 01 	call	0x382	; 0x382 <timer1_init>
	MFRC522_resetPinInit();
     876:	0e 94 02 02 	call	0x404	; 0x404 <MFRC522_resetPinInit>
	MFRC522_init();
     87a:	0e 94 97 05 	call	0xb2e	; 0xb2e <MFRC522_init>
	servo_init();
     87e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <servo_init>
	//UART_init(9600, UART_8BITS, UART_PARITY_DISABLE, UART_STOPBIT_1);
	sei();
     882:	78 94       	sei
	uint8_t passwd[4];
	uint8_t newPasswd[4];
	uint8_t teclasPresionadas = 0;
	uint8_t cambioPasswd = 0;
	
	mensajeHoraPasswd();
     884:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
	sei();
	
	uint8_t passwd[4];
	uint8_t newPasswd[4];
	uint8_t teclasPresionadas = 0;
	uint8_t cambioPasswd = 0;
     888:	00 e0       	ldi	r16, 0x00	; 0
	//UART_init(9600, UART_8BITS, UART_PARITY_DISABLE, UART_STOPBIT_1);
	sei();
	
	uint8_t passwd[4];
	uint8_t newPasswd[4];
	uint8_t teclasPresionadas = 0;
     88a:	e1 2c       	mov	r14, r1
	uint8_t cambioPasswd = 0;
	
	mensajeHoraPasswd();
	
	while(1){
		pressedKey = PressedKey();
     88c:	0e 94 4e 02 	call	0x49c	; 0x49c <PressedKey>
     890:	18 2f       	mov	r17, r24
			//}
			//_delay_ms(1000); // Debounce
		//}
		
		// Se actualiza el reloj si paso un minuto
		if (actualizarHora && !leyendoHistorial) {
     892:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <actualizarHora>
     896:	88 23       	and	r24, r24
     898:	41 f1       	breq	.+80     	; 0x8ea <main+0xb8>
     89a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
     89e:	81 11       	cpse	r24, r1
     8a0:	24 c0       	rjmp	.+72     	; 0x8ea <main+0xb8>
			actualizarHora = 0;
     8a2:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <actualizarHora>

			snprintf(hora_str, sizeof(hora_str), "%02u:%02u", hora, minuto);
     8a6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <minuto>
     8aa:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <hora>
     8ae:	1f 92       	push	r1
     8b0:	9f 93       	push	r25
     8b2:	1f 92       	push	r1
     8b4:	8f 93       	push	r24
     8b6:	8d ea       	ldi	r24, 0xAD	; 173
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	1f 92       	push	r1
     8c0:	8c e0       	ldi	r24, 0x0C	; 12
     8c2:	8f 93       	push	r24
     8c4:	8d ee       	ldi	r24, 0xED	; 237
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	0e 94 1c 07 	call	0xe38	; 0xe38 <snprintf>
			lcd_goto_xy(1, 7);
     8d0:	67 e0       	ldi	r22, 0x07	; 7
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
			lcd_write_word(hora_str);
     8d8:	8d ee       	ldi	r24, 0xED	; 237
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
		}
		
		// Cambio de pin - Usuario presiona dos veces seguidas '*'
		if (pressedKey == '*' && !puertaAbierta) {
     8ea:	1a 32       	cpi	r17, 0x2A	; 42
     8ec:	31 f4       	brne	.+12     	; 0x8fa <main+0xc8>
     8ee:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <puertaAbierta>
     8f2:	81 11       	cpse	r24, r1
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <main+0xc8>
			cambioPasswd++;
     8f6:	0f 5f       	subi	r16, 0xFF	; 255
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
			} else if (pressedKey != 'A') {
     8fa:	11 34       	cpi	r17, 0x41	; 65
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
			cambioPasswd = 0;
     8fe:	00 e0       	ldi	r16, 0x00	; 0
		}
		if (cambioPasswd == 2){
     900:	02 30       	cpi	r16, 0x02	; 2
     902:	d1 f5       	brne	.+116    	; 0x978 <__stack+0x79>
			cambioPasswd++;
     904:	0f 5f       	subi	r16, 0xFF	; 255
			teclasPresionadas = 0;
			
			if (cambioPasswd == 3){
     906:	03 30       	cpi	r16, 0x03	; 3
     908:	b1 f5       	brne	.+108    	; 0x976 <__stack+0x77>
				lcd_clear();
     90a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
				lcd_goto_xy(0,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				lcd_write_word("- Changing Code");
     916:	87 eb       	ldi	r24, 0xB7	; 183
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
				lcd_goto_xy(1, 0);
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				lcd_write_word("New Code: ");
     926:	87 ec       	ldi	r24, 0xC7	; 199
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
			} else if (pressedKey != 'A') {
			cambioPasswd = 0;
		}
		if (cambioPasswd == 2){
			cambioPasswd++;
			teclasPresionadas = 0;
     92e:	00 e0       	ldi	r16, 0x00	; 0
				lcd_goto_xy(0,0);
				lcd_write_word("- Changing Code");
				lcd_goto_xy(1, 0);
				lcd_write_word("New Code: ");
				
				while (teclasPresionadas < 4){
     930:	16 c0       	rjmp	.+44     	; 0x95e <__stack+0x5f>
					pressedKey = PressedKey();
     932:	0e 94 4e 02 	call	0x49c	; 0x49c <PressedKey>
					if ((pressedKey >= '0' && pressedKey <= '9')){
     936:	10 ed       	ldi	r17, 0xD0	; 208
     938:	18 0f       	add	r17, r24
     93a:	1a 30       	cpi	r17, 0x0A	; 10
     93c:	80 f4       	brcc	.+32     	; 0x95e <__stack+0x5f>
						lcd_goto_xy(1, 10+teclasPresionadas);
     93e:	6a e0       	ldi	r22, 0x0A	; 10
     940:	60 0f       	add	r22, r16
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
						lcd_write_character('*');
     948:	8a e2       	ldi	r24, 0x2A	; 42
     94a:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_write_character>
						newPasswd[teclasPresionadas] = pressedKey - '0';
     94e:	e5 e0       	ldi	r30, 0x05	; 5
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	ec 0f       	add	r30, r28
     954:	fd 1f       	adc	r31, r29
     956:	e0 0f       	add	r30, r16
     958:	f1 1d       	adc	r31, r1
     95a:	10 83       	st	Z, r17
						teclasPresionadas++;
     95c:	0f 5f       	subi	r16, 0xFF	; 255
				lcd_goto_xy(0,0);
				lcd_write_word("- Changing Code");
				lcd_goto_xy(1, 0);
				lcd_write_word("New Code: ");
				
				while (teclasPresionadas < 4){
     95e:	04 30       	cpi	r16, 0x04	; 4
     960:	40 f3       	brcs	.-48     	; 0x932 <__stack+0x33>
						newPasswd[teclasPresionadas] = pressedKey - '0';
						teclasPresionadas++;
					}
				}
				
				cambiarPasswd(newPasswd);
     962:	ce 01       	movw	r24, r28
     964:	05 96       	adiw	r24, 0x05	; 5
     966:	0e 94 c7 02 	call	0x58e	; 0x58e <cambiarPasswd>
				mensajeHoraPasswd();
     96a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
				teclasPresionadas = 0;
				pressedKey = 'A';
				cambioPasswd = 0;
     96e:	00 e0       	ldi	r16, 0x00	; 0
					}
				}
				
				cambiarPasswd(newPasswd);
				mensajeHoraPasswd();
				teclasPresionadas = 0;
     970:	e1 2c       	mov	r14, r1
				pressedKey = 'A';
     972:	11 e4       	ldi	r17, 0x41	; 65
     974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
			} else if (pressedKey != 'A') {
			cambioPasswd = 0;
		}
		if (cambioPasswd == 2){
			cambioPasswd++;
			teclasPresionadas = 0;
     976:	e1 2c       	mov	r14, r1
			}
		}
		
		
		// Usuario ingresa código
		if (((pressedKey >= '0' && pressedKey <= '9') && teclasPresionadas < 4) && !puertaAbierta){
     978:	0f 2e       	mov	r0, r31
     97a:	f0 ed       	ldi	r31, 0xD0	; 208
     97c:	ff 2e       	mov	r15, r31
     97e:	f0 2d       	mov	r31, r0
     980:	f1 0e       	add	r15, r17
     982:	99 e0       	ldi	r25, 0x09	; 9
     984:	9f 15       	cp	r25, r15
     986:	f0 f0       	brcs	.+60     	; 0x9c4 <__stack+0xc5>
     988:	23 e0       	ldi	r18, 0x03	; 3
     98a:	2e 15       	cp	r18, r14
     98c:	d8 f0       	brcs	.+54     	; 0x9c4 <__stack+0xc5>
     98e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <puertaAbierta>
     992:	81 11       	cpse	r24, r1
     994:	17 c0       	rjmp	.+46     	; 0x9c4 <__stack+0xc5>
			lcd_goto_xy(0, 10+teclasPresionadas);
     996:	6a e0       	ldi	r22, 0x0A	; 10
     998:	6e 0d       	add	r22, r14
     99a:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
			lcd_write_character('*');
     99e:	8a e2       	ldi	r24, 0x2A	; 42
     9a0:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_write_character>
			passwd[teclasPresionadas] = pressedKey - '0';
     9a4:	e1 e0       	ldi	r30, 0x01	; 1
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	ec 0f       	add	r30, r28
     9aa:	fd 1f       	adc	r31, r29
     9ac:	ee 0d       	add	r30, r14
     9ae:	f1 1d       	adc	r31, r1
     9b0:	f0 82       	st	Z, r15
			teclasPresionadas++;
     9b2:	e3 94       	inc	r14
			
			// Codigo valido
			if (teclasPresionadas >= 4){
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	8e 15       	cp	r24, r14
     9b8:	28 f4       	brcc	.+10     	; 0x9c4 <__stack+0xc5>
				validarPasswd(passwd);
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 41 03 	call	0x682	; 0x682 <validarPasswd>
				teclasPresionadas = 0;
     9c2:	e1 2c       	mov	r14, r1
			}
		}
		
		// Usuario aproxima Tarjeta RFID
		if (read_rfid_tag() && !puertaAbierta){
     9c4:	0e 94 09 02 	call	0x412	; 0x412 <read_rfid_tag>
     9c8:	88 23       	and	r24, r24
     9ca:	e9 f1       	breq	.+122    	; 0xa46 <__stack+0x147>
     9cc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <puertaAbierta>
     9d0:	81 11       	cpse	r24, r1
     9d2:	39 c0       	rjmp	.+114    	; 0xa46 <__stack+0x147>
			// Tag RFID valido
			if (compare_uids(saved_uid, known_uid) || compare_uids(saved_uid, known_uid2)) {
     9d4:	65 e0       	ldi	r22, 0x05	; 5
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	89 ef       	ldi	r24, 0xF9	; 249
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 38 02 	call	0x470	; 0x470 <compare_uids>
     9e0:	81 11       	cpse	r24, r1
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <__stack+0xf5>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 38 02 	call	0x470	; 0x470 <compare_uids>
     9f0:	88 23       	and	r24, r24
     9f2:	19 f0       	breq	.+6      	; 0x9fa <__stack+0xfb>
				//UART_string("Authorized tag detected!\r\n");
				abrirPuerta();
     9f4:	0e 94 21 03 	call	0x642	; 0x642 <abrirPuerta>
     9f8:	1d c0       	rjmp	.+58     	; 0xa34 <__stack+0x135>
			} else{
				lcd_clear();
     9fa:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
				lcd_goto_xy(0,0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				lcd_write_word("Incorrect RFID!");
     a06:	82 ed       	ldi	r24, 0xD2	; 210
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
				lcd_goto_xy(1,0);
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_goto_xy>
				lcd_write_word("Try again...");
     a16:	8d e5       	ldi	r24, 0x5D	; 93
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_write_word>
     a1e:	9f e7       	ldi	r25, 0x7F	; 127
     a20:	2a e1       	ldi	r18, 0x1A	; 26
     a22:	86 e0       	ldi	r24, 0x06	; 6
     a24:	91 50       	subi	r25, 0x01	; 1
     a26:	20 40       	sbci	r18, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <__stack+0x125>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <__stack+0x12f>
     a2e:	00 00       	nop
				_delay_ms(2000);
				mensajeHoraPasswd();
     a30:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <mensajeHoraPasswd>
     a34:	9f e3       	ldi	r25, 0x3F	; 63
     a36:	2d e0       	ldi	r18, 0x0D	; 13
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	91 50       	subi	r25, 0x01	; 1
     a3c:	20 40       	sbci	r18, 0x00	; 0
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <__stack+0x13b>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <__stack+0x145>
     a44:	00 00       	nop
			}
			_delay_ms(1000);// Debounce
		}
		
		// Usuario abre historial con '#'
		if (pressedKey == '#'){
     a46:	13 32       	cpi	r17, 0x23	; 35
     a48:	11 f4       	brne	.+4      	; 0xa4e <__stack+0x14f>
			leerHistorial();
     a4a:	0e 94 94 03 	call	0x728	; 0x728 <leerHistorial>
		}
		
		// Usuario cierra puerta con '*'
		if (puertaAbierta && pressedKey == '*')
     a4e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <puertaAbierta>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x159>
     a56:	1a cf       	rjmp	.-460    	; 0x88c <main+0x5a>
     a58:	1a 32       	cpi	r17, 0x2A	; 42
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	17 cf       	rjmp	.-466    	; 0x88c <main+0x5a>
			cerrarPuerta();
     a5e:	0e 94 ef 02 	call	0x5de	; 0x5de <cerrarPuerta>
     a62:	14 cf       	rjmp	.-472    	; 0x88c <main+0x5a>

00000a64 <SPI_init>:

#include "mfrc522.h"
#include <util/delay.h>

void SPI_init() {
	SPI_DDR |= (1 << SPI_CS) | (1 << SPI_MOSI) | (1 << SPI_SCK);
     a64:	84 b1       	in	r24, 0x04	; 4
     a66:	8c 62       	ori	r24, 0x2C	; 44
     a68:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a6a:	81 e5       	ldi	r24, 0x51	; 81
     a6c:	8c bd       	out	0x2c, r24	; 44
	CS_DISABLE();
     a6e:	85 b1       	in	r24, 0x05	; 5
     a70:	84 60       	ori	r24, 0x04	; 4
     a72:	85 b9       	out	0x05, r24	; 5
     a74:	08 95       	ret

00000a76 <SPI_transfer>:
}

char SPI_transfer(char data) {
	SPDR = data;
     a76:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <SPI_transfer+0x2>
	return SPDR;
     a7e:	8e b5       	in	r24, 0x2e	; 46
}
     a80:	08 95       	ret

00000a82 <MFRC522_write>:

void MFRC522_write(uint8_t addr, uint8_t val) {
     a82:	cf 93       	push	r28
     a84:	c6 2f       	mov	r28, r22
	CS_ENABLE();
     a86:	95 b1       	in	r25, 0x05	; 5
     a88:	9b 7f       	andi	r25, 0xFB	; 251
     a8a:	95 b9       	out	0x05, r25	; 5
	SPI_transfer((addr << 1) & 0x7E);
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	8e 77       	andi	r24, 0x7E	; 126
     a94:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_transfer>
	SPI_transfer(val);
     a98:	8c 2f       	mov	r24, r28
     a9a:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_transfer>
	CS_DISABLE();
     a9e:	85 b1       	in	r24, 0x05	; 5
     aa0:	84 60       	ori	r24, 0x04	; 4
     aa2:	85 b9       	out	0x05, r24	; 5
}
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <MFRC522_read>:

uint8_t MFRC522_read(uint8_t addr) {
	CS_ENABLE();
     aa8:	95 b1       	in	r25, 0x05	; 5
     aaa:	9b 7f       	andi	r25, 0xFB	; 251
     aac:	95 b9       	out	0x05, r25	; 5
	SPI_transfer(((addr << 1) & 0x7E) | 0x80);
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	8e 77       	andi	r24, 0x7E	; 126
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_transfer>
	uint8_t val = SPI_transfer(0x00);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 3b 05 	call	0xa76	; 0xa76 <SPI_transfer>
	CS_DISABLE();
     ac2:	95 b1       	in	r25, 0x05	; 5
     ac4:	94 60       	ori	r25, 0x04	; 4
     ac6:	95 b9       	out	0x05, r25	; 5
	return val;
}
     ac8:	08 95       	ret

00000aca <MFRC522_setBitMask>:

void MFRC522_setBitMask(uint8_t reg, uint8_t mask) {
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	d8 2f       	mov	r29, r24
     ad0:	c6 2f       	mov	r28, r22
	uint8_t tmp = MFRC522_read(reg);
     ad2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
	MFRC522_write(reg, tmp | mask);
     ad6:	68 2f       	mov	r22, r24
     ad8:	6c 2b       	or	r22, r28
     ada:	8d 2f       	mov	r24, r29
     adc:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <MFRC522_clearBitMask>:

void MFRC522_clearBitMask(uint8_t reg, uint8_t mask) {
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	d8 2f       	mov	r29, r24
     aec:	c6 2f       	mov	r28, r22
	uint8_t tmp = MFRC522_read(reg);
     aee:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
	MFRC522_write(reg, tmp & (~mask));
     af2:	c0 95       	com	r28
     af4:	6c 2f       	mov	r22, r28
     af6:	68 23       	and	r22, r24
     af8:	8d 2f       	mov	r24, r29
     afa:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <MFRC522_reset>:

void MFRC522_reset() {
	MFRC522_write(CommandReg, PCD_SOFTRESET);
     b04:	6f e0       	ldi	r22, 0x0F	; 15
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
     b0c:	83 ed       	ldi	r24, 0xD3	; 211
     b0e:	90 e3       	ldi	r25, 0x30	; 48
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <MFRC522_reset+0xc>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <MFRC522_reset+0x12>
     b16:	00 00       	nop
     b18:	08 95       	ret

00000b1a <MFRC522_antenna_on>:
	_delay_ms(50);
}

void MFRC522_antenna_on() {
	uint8_t temp = MFRC522_read(TxControlReg);
     b1a:	84 e1       	ldi	r24, 0x14	; 20
     b1c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
	if (!(temp & 0x03)) {
     b20:	83 70       	andi	r24, 0x03	; 3
     b22:	21 f4       	brne	.+8      	; 0xb2c <MFRC522_antenna_on+0x12>
		MFRC522_setBitMask(TxControlReg, 0x03);
     b24:	63 e0       	ldi	r22, 0x03	; 3
     b26:	84 e1       	ldi	r24, 0x14	; 20
     b28:	0e 94 65 05 	call	0xaca	; 0xaca <MFRC522_setBitMask>
     b2c:	08 95       	ret

00000b2e <MFRC522_init>:
	}
}

void MFRC522_init() {
	SPI_init();
     b2e:	0e 94 32 05 	call	0xa64	; 0xa64 <SPI_init>
	MFRC522_reset();
     b32:	0e 94 82 05 	call	0xb04	; 0xb04 <MFRC522_reset>
	MFRC522_write(TxModeReg, 0x00);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	82 e1       	ldi	r24, 0x12	; 18
     b3a:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(RxModeReg, 0x00);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	83 e1       	ldi	r24, 0x13	; 19
     b42:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(ModWidthReg, 0x26);
     b46:	66 e2       	ldi	r22, 0x26	; 38
     b48:	84 e2       	ldi	r24, 0x24	; 36
     b4a:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(TModeReg, 0x80);
     b4e:	60 e8       	ldi	r22, 0x80	; 128
     b50:	8a e2       	ldi	r24, 0x2A	; 42
     b52:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(TPrescalerReg, 0xA9);
     b56:	69 ea       	ldi	r22, 0xA9	; 169
     b58:	8b e2       	ldi	r24, 0x2B	; 43
     b5a:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(TReloadRegL, 0xE8);
     b5e:	68 ee       	ldi	r22, 0xE8	; 232
     b60:	8d e2       	ldi	r24, 0x2D	; 45
     b62:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(TReloadRegH, 0x03);
     b66:	63 e0       	ldi	r22, 0x03	; 3
     b68:	8c e2       	ldi	r24, 0x2C	; 44
     b6a:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(TxASKReg, 0x40);
     b6e:	60 e4       	ldi	r22, 0x40	; 64
     b70:	85 e1       	ldi	r24, 0x15	; 21
     b72:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(ModeReg, 0x3D);
     b76:	6d e3       	ldi	r22, 0x3D	; 61
     b78:	81 e1       	ldi	r24, 0x11	; 17
     b7a:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_antenna_on();
     b7e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <MFRC522_antenna_on>
     b82:	08 95       	ret

00000b84 <MFRC522_toCard>:
	serNumCheck ^= serNum[i];
	return (serNumCheck == serNum[4]);
}

char MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
uint8_t *backData, uint8_t *backLen) {
     b84:	8f 92       	push	r8
     b86:	9f 92       	push	r9
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	98 2e       	mov	r9, r24
     b9e:	5b 01       	movw	r10, r22
     ba0:	84 2e       	mov	r8, r20
     ba2:	79 01       	movw	r14, r18
     ba4:	68 01       	movw	r12, r16
	uint8_t waitIRq = 0x30;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	MFRC522_write(CommandReg, PCD_IDLE);
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(CommIEnReg, irqEn | 0x80);
     bae:	67 ef       	ldi	r22, 0xF7	; 247
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_clearBitMask(CommIrqReg, 0x80);
     bb6:	60 e8       	ldi	r22, 0x80	; 128
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	0e 94 73 05 	call	0xae6	; 0xae6 <MFRC522_clearBitMask>
	MFRC522_setBitMask(FIFOLevelReg, 0x80);
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	0e 94 65 05 	call	0xaca	; 0xaca <MFRC522_setBitMask>

	for (i = 0; i < sendLen; i++) {
     bc6:	c0 e0       	ldi	r28, 0x00	; 0
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <MFRC522_toCard+0x58>
		MFRC522_write(FIFODataReg, sendData[i]);
     bcc:	f5 01       	movw	r30, r10
     bce:	ec 0f       	add	r30, r28
     bd0:	fd 1f       	adc	r31, r29
     bd2:	60 81       	ld	r22, Z
     bd4:	89 e0       	ldi	r24, 0x09	; 9
     bd6:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	MFRC522_write(CommandReg, PCD_IDLE);
	MFRC522_write(CommIEnReg, irqEn | 0x80);
	MFRC522_clearBitMask(CommIrqReg, 0x80);
	MFRC522_setBitMask(FIFOLevelReg, 0x80);

	for (i = 0; i < sendLen; i++) {
     bda:	21 96       	adiw	r28, 0x01	; 1
     bdc:	88 2d       	mov	r24, r8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	c8 17       	cp	r28, r24
     be2:	d9 07       	cpc	r29, r25
     be4:	98 f3       	brcs	.-26     	; 0xbcc <MFRC522_toCard+0x48>
		MFRC522_write(FIFODataReg, sendData[i]);
	}

	MFRC522_write(CommandReg, command);
     be6:	69 2d       	mov	r22, r9
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	if (command == PCD_TRANSCEIVE)
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	98 12       	cpse	r9, r24
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <MFRC522_toCard+0x78>
	MFRC522_setBitMask(BitFramingReg, 0x80);
     bf4:	60 e8       	ldi	r22, 0x80	; 128
     bf6:	8d e0       	ldi	r24, 0x0D	; 13
     bf8:	0e 94 65 05 	call	0xaca	; 0xaca <MFRC522_setBitMask>
	MFRC522_write(CommandReg, PCD_IDLE);
	MFRC522_write(CommIEnReg, irqEn | 0x80);
	MFRC522_clearBitMask(CommIrqReg, 0x80);
	MFRC522_setBitMask(FIFOLevelReg, 0x80);

	for (i = 0; i < sendLen; i++) {
     bfc:	c0 ed       	ldi	r28, 0xD0	; 208
     bfe:	d7 e0       	ldi	r29, 0x07	; 7
	if (command == PCD_TRANSCEIVE)
	MFRC522_setBitMask(BitFramingReg, 0x80);

	i = 2000;
	do {
		n = MFRC522_read(CommIrqReg);
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
     c06:	18 2f       	mov	r17, r24
		i--;
     c08:	21 97       	sbiw	r28, 0x01	; 1
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
     c0a:	21 f0       	breq	.+8      	; 0xc14 <MFRC522_toCard+0x90>
     c0c:	80 fd       	sbrc	r24, 0
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <MFRC522_toCard+0x90>
     c10:	80 73       	andi	r24, 0x30	; 48
     c12:	b1 f3       	breq	.-20     	; 0xc00 <MFRC522_toCard+0x7c>

	MFRC522_clearBitMask(BitFramingReg, 0x80);
     c14:	60 e8       	ldi	r22, 0x80	; 128
     c16:	8d e0       	ldi	r24, 0x0D	; 13
     c18:	0e 94 73 05 	call	0xae6	; 0xae6 <MFRC522_clearBitMask>

	if (i != 0) {
     c1c:	cd 2b       	or	r28, r29
     c1e:	c9 f1       	breq	.+114    	; 0xc92 <MFRC522_toCard+0x10e>
		if (!(MFRC522_read(ErrorReg) & 0x1B)) {
     c20:	86 e0       	ldi	r24, 0x06	; 6
     c22:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
     c26:	8b 71       	andi	r24, 0x1B	; 27
     c28:	b1 f5       	brne	.+108    	; 0xc96 <MFRC522_toCard+0x112>
			status = 1;
			if (n & irqEn & 0x01) status = 0;
     c2a:	10 fd       	sbrc	r17, 0
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <MFRC522_toCard+0xae>

	MFRC522_clearBitMask(BitFramingReg, 0x80);

	if (i != 0) {
		if (!(MFRC522_read(ErrorReg) & 0x1B)) {
			status = 1;
     c2e:	c1 e0       	ldi	r28, 0x01	; 1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <MFRC522_toCard+0xb0>
			if (n & irqEn & 0x01) status = 0;
     c32:	c0 e0       	ldi	r28, 0x00	; 0

			if (command == PCD_TRANSCEIVE) {
     c34:	ec e0       	ldi	r30, 0x0C	; 12
     c36:	9e 12       	cpse	r9, r30
     c38:	2f c0       	rjmp	.+94     	; 0xc98 <MFRC522_toCard+0x114>
				n = MFRC522_read(FIFOLevelReg);
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
     c40:	d8 2f       	mov	r29, r24
				lastBits = MFRC522_read(ControlReg) & 0x07;
     c42:	8c e0       	ldi	r24, 0x0C	; 12
     c44:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
     c48:	87 70       	andi	r24, 0x07	; 7
				*backLen = (lastBits) ? (n - 1) * 8 + lastBits : n * 8;
     c4a:	49 f0       	breq	.+18     	; 0xc5e <MFRC522_toCard+0xda>
     c4c:	2d 2f       	mov	r18, r29
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	21 50       	subi	r18, 0x01	; 1
     c52:	31 09       	sbc	r19, r1
     c54:	22 0f       	add	r18, r18
     c56:	22 0f       	add	r18, r18
     c58:	22 0f       	add	r18, r18
     c5a:	82 0f       	add	r24, r18
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <MFRC522_toCard+0xe2>
     c5e:	8d 2f       	mov	r24, r29
     c60:	88 0f       	add	r24, r24
     c62:	88 0f       	add	r24, r24
     c64:	88 0f       	add	r24, r24
     c66:	f6 01       	movw	r30, r12
     c68:	80 83       	st	Z, r24
				for (i = 0; i < n; i++) {
     c6a:	c1 2c       	mov	r12, r1
     c6c:	d1 2c       	mov	r13, r1
     c6e:	0b c0       	rjmp	.+22     	; 0xc86 <MFRC522_toCard+0x102>
					backData[i] = MFRC522_read(FIFODataReg);
     c70:	57 01       	movw	r10, r14
     c72:	ac 0c       	add	r10, r12
     c74:	bd 1c       	adc	r11, r13
     c76:	89 e0       	ldi	r24, 0x09	; 9
     c78:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MFRC522_read>
     c7c:	f5 01       	movw	r30, r10
     c7e:	80 83       	st	Z, r24

			if (command == PCD_TRANSCEIVE) {
				n = MFRC522_read(FIFOLevelReg);
				lastBits = MFRC522_read(ControlReg) & 0x07;
				*backLen = (lastBits) ? (n - 1) * 8 + lastBits : n * 8;
				for (i = 0; i < n; i++) {
     c80:	ff ef       	ldi	r31, 0xFF	; 255
     c82:	cf 1a       	sub	r12, r31
     c84:	df 0a       	sbc	r13, r31
     c86:	8d 2f       	mov	r24, r29
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	c8 16       	cp	r12, r24
     c8c:	d9 06       	cpc	r13, r25
     c8e:	80 f3       	brcs	.-32     	; 0xc70 <MFRC522_toCard+0xec>
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <MFRC522_toCard+0x114>
	return (serNumCheck == serNum[4]);
}

char MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
uint8_t *backData, uint8_t *backLen) {
	uint8_t status = 0;
     c92:	c0 e0       	ldi	r28, 0x00	; 0
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <MFRC522_toCard+0x114>
     c96:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
	}

	return status;
     c98:	8c 2f       	mov	r24, r28
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	08 95       	ret

00000cb4 <MFRC522_request>:
	MFRC522_write(TxASKReg, 0x40);
	MFRC522_write(ModeReg, 0x3D);
	MFRC522_antenna_on();
}

char MFRC522_request(uint8_t reqMode, uint8_t *tagType) {
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	1f 92       	push	r1
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	18 2f       	mov	r17, r24
     cc8:	7b 01       	movw	r14, r22
	char status;
	uint8_t backBits;

	MFRC522_write(BitFramingReg, 0x07);
     cca:	67 e0       	ldi	r22, 0x07	; 7
     ccc:	8d e0       	ldi	r24, 0x0D	; 13
     cce:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	tagType[0] = reqMode;
     cd2:	f7 01       	movw	r30, r14
     cd4:	10 83       	st	Z, r17
	status = MFRC522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
     cd6:	8e 01       	movw	r16, r28
     cd8:	0f 5f       	subi	r16, 0xFF	; 255
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
     cdc:	97 01       	movw	r18, r14
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	b7 01       	movw	r22, r14
     ce2:	8c e0       	ldi	r24, 0x0C	; 12
     ce4:	0e 94 c2 05 	call	0xb84	; 0xb84 <MFRC522_toCard>
	return (status && (backBits == 0x10));
     ce8:	88 23       	and	r24, r24
     cea:	29 f0       	breq	.+10     	; 0xcf6 <MFRC522_request+0x42>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	80 31       	cpi	r24, 0x10	; 16
     cf0:	21 f0       	breq	.+8      	; 0xcfa <MFRC522_request+0x46>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <MFRC522_request+0x48>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <MFRC522_request+0x48>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
}
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	08 95       	ret

00000d0c <MFRC522_anticoll>:

char MFRC522_anticoll(uint8_t *serNum) {
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	7c 01       	movw	r14, r24
	char status;
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint8_t unLen;

	MFRC522_write(BitFramingReg, 0x00);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	8d e0       	ldi	r24, 0x0D	; 13
     d24:	0e 94 41 05 	call	0xa82	; 0xa82 <MFRC522_write>
	serNum[0] = 0x93;
     d28:	83 e9       	ldi	r24, 0x93	; 147
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 83       	st	Z, r24
	serNum[1] = 0x20;
     d2e:	80 e2       	ldi	r24, 0x20	; 32
     d30:	81 83       	std	Z+1, r24	; 0x01

	status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
     d32:	8e 01       	movw	r16, r28
     d34:	0f 5f       	subi	r16, 0xFF	; 255
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	97 01       	movw	r18, r14
     d3a:	42 e0       	ldi	r20, 0x02	; 2
     d3c:	b7 01       	movw	r22, r14
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	0e 94 c2 05 	call	0xb84	; 0xb84 <MFRC522_toCard>
	if (!status) return 0;
     d44:	88 23       	and	r24, r24
     d46:	91 f0       	breq	.+36     	; 0xd6c <MFRC522_anticoll+0x60>
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <MFRC522_anticoll+0x4e>

	for (i = 0; i < 4; i++)
	serNumCheck ^= serNum[i];
     d4e:	f7 01       	movw	r30, r14
     d50:	e8 0f       	add	r30, r24
     d52:	f1 1d       	adc	r31, r1
     d54:	20 81       	ld	r18, Z
     d56:	92 27       	eor	r25, r18
	serNum[1] = 0x20;

	status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
	if (!status) return 0;

	for (i = 0; i < 4; i++)
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	c0 f3       	brcs	.-16     	; 0xd4e <MFRC522_anticoll+0x42>
	serNumCheck ^= serNum[i];
	return (serNumCheck == serNum[4]);
     d5e:	f7 01       	movw	r30, r14
     d60:	24 81       	ldd	r18, Z+4	; 0x04
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	92 17       	cp	r25, r18
     d66:	19 f0       	breq	.+6      	; 0xd6e <MFRC522_anticoll+0x62>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <MFRC522_anticoll+0x62>
	MFRC522_write(BitFramingReg, 0x00);
	serNum[0] = 0x93;
	serNum[1] = 0x20;

	status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
	if (!status) return 0;
     d6c:	80 e0       	ldi	r24, 0x00	; 0

	for (i = 0; i < 4; i++)
	serNumCheck ^= serNum[i];
	return (serNumCheck == serNum[4]);
}
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <servo_init>:
#include "servo.h"

void servo_init(void) {
	DDRB |= (1 << PB1); // OC1A = Pin 9 en Arduino Uno
     d7e:	84 b1       	in	r24, 0x04	; 4
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	84 b9       	out	0x04, r24	; 4

	// Modo 14: Fast PWM con TOP en ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
     d84:	82 e8       	ldi	r24, 0x82	; 130
     d86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
     d8a:	8a e1       	ldi	r24, 0x1A	; 26
     d8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 39999; // TOP = 20 ms -> 16MHz / (8 * 50 Hz) - 1
     d90:	8f e3       	ldi	r24, 0x3F	; 63
     d92:	9c e9       	ldi	r25, 0x9C	; 156
     d94:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     d98:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	OCR1A = 3000; // Pulso inicial (1.5 ms = posición neutral)
     d9c:	88 eb       	ldi	r24, 0xB8	; 184
     d9e:	9b e0       	ldi	r25, 0x0B	; 11
     da0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     da4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     da8:	08 95       	ret

00000daa <servoAngulo>:
}

void servoAngulo(uint8_t angulo) {
	if (angulo > 180) {
     daa:	85 3b       	cpi	r24, 0xB5	; 181
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <servoAngulo+0x6>
		angulo = 180;
     dae:	84 eb       	ldi	r24, 0xB4	; 180
	}

	// 0180 a 11004700
	uint16_t valorOCR = ((uint32_t)angulo * (4700 - 1100)) / 180 + 1100;
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	a0 e1       	ldi	r26, 0x10	; 16
     db6:	be e0       	ldi	r27, 0x0E	; 14
     db8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__umulhisi3>
     dbc:	24 eb       	ldi	r18, 0xB4	; 180
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__udivmodsi4>
     dc8:	24 5b       	subi	r18, 0xB4	; 180
     dca:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = valorOCR;
     dcc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     dd0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     dd4:	08 95       	ret

00000dd6 <__udivmodsi4>:
     dd6:	a1 e2       	ldi	r26, 0x21	; 33
     dd8:	1a 2e       	mov	r1, r26
     dda:	aa 1b       	sub	r26, r26
     ddc:	bb 1b       	sub	r27, r27
     dde:	fd 01       	movw	r30, r26
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <__udivmodsi4_ep>

00000de2 <__udivmodsi4_loop>:
     de2:	aa 1f       	adc	r26, r26
     de4:	bb 1f       	adc	r27, r27
     de6:	ee 1f       	adc	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	a2 17       	cp	r26, r18
     dec:	b3 07       	cpc	r27, r19
     dee:	e4 07       	cpc	r30, r20
     df0:	f5 07       	cpc	r31, r21
     df2:	20 f0       	brcs	.+8      	; 0xdfc <__udivmodsi4_ep>
     df4:	a2 1b       	sub	r26, r18
     df6:	b3 0b       	sbc	r27, r19
     df8:	e4 0b       	sbc	r30, r20
     dfa:	f5 0b       	sbc	r31, r21

00000dfc <__udivmodsi4_ep>:
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	1a 94       	dec	r1
     e06:	69 f7       	brne	.-38     	; 0xde2 <__udivmodsi4_loop>
     e08:	60 95       	com	r22
     e0a:	70 95       	com	r23
     e0c:	80 95       	com	r24
     e0e:	90 95       	com	r25
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	bd 01       	movw	r22, r26
     e16:	cf 01       	movw	r24, r30
     e18:	08 95       	ret

00000e1a <__umulhisi3>:
     e1a:	a2 9f       	mul	r26, r18
     e1c:	b0 01       	movw	r22, r0
     e1e:	b3 9f       	mul	r27, r19
     e20:	c0 01       	movw	r24, r0
     e22:	a3 9f       	mul	r26, r19
     e24:	70 0d       	add	r23, r0
     e26:	81 1d       	adc	r24, r1
     e28:	11 24       	eor	r1, r1
     e2a:	91 1d       	adc	r25, r1
     e2c:	b2 9f       	mul	r27, r18
     e2e:	70 0d       	add	r23, r0
     e30:	81 1d       	adc	r24, r1
     e32:	11 24       	eor	r1, r1
     e34:	91 1d       	adc	r25, r1
     e36:	08 95       	ret

00000e38 <snprintf>:
     e38:	ae e0       	ldi	r26, 0x0E	; 14
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e2 e2       	ldi	r30, 0x22	; 34
     e3e:	f7 e0       	ldi	r31, 0x07	; 7
     e40:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__prologue_saves__+0x1c>
     e44:	0d 89       	ldd	r16, Y+21	; 0x15
     e46:	1e 89       	ldd	r17, Y+22	; 0x16
     e48:	8f 89       	ldd	r24, Y+23	; 0x17
     e4a:	98 8d       	ldd	r25, Y+24	; 0x18
     e4c:	26 e0       	ldi	r18, 0x06	; 6
     e4e:	2c 83       	std	Y+4, r18	; 0x04
     e50:	1a 83       	std	Y+2, r17	; 0x02
     e52:	09 83       	std	Y+1, r16	; 0x01
     e54:	97 ff       	sbrs	r25, 7
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <snprintf+0x24>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e8       	ldi	r25, 0x80	; 128
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	ae 01       	movw	r20, r28
     e64:	45 5e       	subi	r20, 0xE5	; 229
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	69 8d       	ldd	r22, Y+25	; 0x19
     e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 4c 07 	call	0xe98	; 0xe98 <vfprintf>
     e74:	4d 81       	ldd	r20, Y+5	; 0x05
     e76:	5e 81       	ldd	r21, Y+6	; 0x06
     e78:	57 fd       	sbrc	r21, 7
     e7a:	0a c0       	rjmp	.+20     	; 0xe90 <snprintf+0x58>
     e7c:	2f 81       	ldd	r18, Y+7	; 0x07
     e7e:	38 85       	ldd	r19, Y+8	; 0x08
     e80:	42 17       	cp	r20, r18
     e82:	53 07       	cpc	r21, r19
     e84:	0c f4       	brge	.+2      	; 0xe88 <snprintf+0x50>
     e86:	9a 01       	movw	r18, r20
     e88:	f8 01       	movw	r30, r16
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	10 82       	st	Z, r1
     e90:	2e 96       	adiw	r28, 0x0e	; 14
     e92:	e4 e0       	ldi	r30, 0x04	; 4
     e94:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__epilogue_restores__+0x1c>

00000e98 <vfprintf>:
     e98:	ab e0       	ldi	r26, 0x0B	; 11
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e5       	ldi	r30, 0x52	; 82
     e9e:	f7 e0       	ldi	r31, 0x07	; 7
     ea0:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__prologue_saves__>
     ea4:	6c 01       	movw	r12, r24
     ea6:	7b 01       	movw	r14, r22
     ea8:	8a 01       	movw	r16, r20
     eaa:	fc 01       	movw	r30, r24
     eac:	17 82       	std	Z+7, r1	; 0x07
     eae:	16 82       	std	Z+6, r1	; 0x06
     eb0:	83 81       	ldd	r24, Z+3	; 0x03
     eb2:	81 ff       	sbrs	r24, 1
     eb4:	cc c1       	rjmp	.+920    	; 0x124e <vfprintf+0x3b6>
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	3c 01       	movw	r6, r24
     ebc:	f6 01       	movw	r30, r12
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	f7 01       	movw	r30, r14
     ec2:	93 fd       	sbrc	r25, 3
     ec4:	85 91       	lpm	r24, Z+
     ec6:	93 ff       	sbrs	r25, 3
     ec8:	81 91       	ld	r24, Z+
     eca:	7f 01       	movw	r14, r30
     ecc:	88 23       	and	r24, r24
     ece:	09 f4       	brne	.+2      	; 0xed2 <vfprintf+0x3a>
     ed0:	ba c1       	rjmp	.+884    	; 0x1246 <vfprintf+0x3ae>
     ed2:	85 32       	cpi	r24, 0x25	; 37
     ed4:	39 f4       	brne	.+14     	; 0xee4 <vfprintf+0x4c>
     ed6:	93 fd       	sbrc	r25, 3
     ed8:	85 91       	lpm	r24, Z+
     eda:	93 ff       	sbrs	r25, 3
     edc:	81 91       	ld	r24, Z+
     ede:	7f 01       	movw	r14, r30
     ee0:	85 32       	cpi	r24, 0x25	; 37
     ee2:	29 f4       	brne	.+10     	; 0xeee <vfprintf+0x56>
     ee4:	b6 01       	movw	r22, r12
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
     eec:	e7 cf       	rjmp	.-50     	; 0xebc <vfprintf+0x24>
     eee:	91 2c       	mov	r9, r1
     ef0:	21 2c       	mov	r2, r1
     ef2:	31 2c       	mov	r3, r1
     ef4:	ff e1       	ldi	r31, 0x1F	; 31
     ef6:	f3 15       	cp	r31, r3
     ef8:	d8 f0       	brcs	.+54     	; 0xf30 <vfprintf+0x98>
     efa:	8b 32       	cpi	r24, 0x2B	; 43
     efc:	79 f0       	breq	.+30     	; 0xf1c <vfprintf+0x84>
     efe:	38 f4       	brcc	.+14     	; 0xf0e <vfprintf+0x76>
     f00:	80 32       	cpi	r24, 0x20	; 32
     f02:	79 f0       	breq	.+30     	; 0xf22 <vfprintf+0x8a>
     f04:	83 32       	cpi	r24, 0x23	; 35
     f06:	a1 f4       	brne	.+40     	; 0xf30 <vfprintf+0x98>
     f08:	23 2d       	mov	r18, r3
     f0a:	20 61       	ori	r18, 0x10	; 16
     f0c:	1d c0       	rjmp	.+58     	; 0xf48 <vfprintf+0xb0>
     f0e:	8d 32       	cpi	r24, 0x2D	; 45
     f10:	61 f0       	breq	.+24     	; 0xf2a <vfprintf+0x92>
     f12:	80 33       	cpi	r24, 0x30	; 48
     f14:	69 f4       	brne	.+26     	; 0xf30 <vfprintf+0x98>
     f16:	23 2d       	mov	r18, r3
     f18:	21 60       	ori	r18, 0x01	; 1
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <vfprintf+0xb0>
     f1c:	83 2d       	mov	r24, r3
     f1e:	82 60       	ori	r24, 0x02	; 2
     f20:	38 2e       	mov	r3, r24
     f22:	e3 2d       	mov	r30, r3
     f24:	e4 60       	ori	r30, 0x04	; 4
     f26:	3e 2e       	mov	r3, r30
     f28:	2a c0       	rjmp	.+84     	; 0xf7e <vfprintf+0xe6>
     f2a:	f3 2d       	mov	r31, r3
     f2c:	f8 60       	ori	r31, 0x08	; 8
     f2e:	1d c0       	rjmp	.+58     	; 0xf6a <vfprintf+0xd2>
     f30:	37 fc       	sbrc	r3, 7
     f32:	2d c0       	rjmp	.+90     	; 0xf8e <vfprintf+0xf6>
     f34:	20 ed       	ldi	r18, 0xD0	; 208
     f36:	28 0f       	add	r18, r24
     f38:	2a 30       	cpi	r18, 0x0A	; 10
     f3a:	40 f0       	brcs	.+16     	; 0xf4c <vfprintf+0xb4>
     f3c:	8e 32       	cpi	r24, 0x2E	; 46
     f3e:	b9 f4       	brne	.+46     	; 0xf6e <vfprintf+0xd6>
     f40:	36 fc       	sbrc	r3, 6
     f42:	81 c1       	rjmp	.+770    	; 0x1246 <vfprintf+0x3ae>
     f44:	23 2d       	mov	r18, r3
     f46:	20 64       	ori	r18, 0x40	; 64
     f48:	32 2e       	mov	r3, r18
     f4a:	19 c0       	rjmp	.+50     	; 0xf7e <vfprintf+0xe6>
     f4c:	36 fe       	sbrs	r3, 6
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0xc4>
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	98 9e       	mul	r9, r24
     f54:	20 0d       	add	r18, r0
     f56:	11 24       	eor	r1, r1
     f58:	92 2e       	mov	r9, r18
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <vfprintf+0xe6>
     f5c:	ea e0       	ldi	r30, 0x0A	; 10
     f5e:	2e 9e       	mul	r2, r30
     f60:	20 0d       	add	r18, r0
     f62:	11 24       	eor	r1, r1
     f64:	22 2e       	mov	r2, r18
     f66:	f3 2d       	mov	r31, r3
     f68:	f0 62       	ori	r31, 0x20	; 32
     f6a:	3f 2e       	mov	r3, r31
     f6c:	08 c0       	rjmp	.+16     	; 0xf7e <vfprintf+0xe6>
     f6e:	8c 36       	cpi	r24, 0x6C	; 108
     f70:	21 f4       	brne	.+8      	; 0xf7a <vfprintf+0xe2>
     f72:	83 2d       	mov	r24, r3
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	38 2e       	mov	r3, r24
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0xe6>
     f7a:	88 36       	cpi	r24, 0x68	; 104
     f7c:	41 f4       	brne	.+16     	; 0xf8e <vfprintf+0xf6>
     f7e:	f7 01       	movw	r30, r14
     f80:	93 fd       	sbrc	r25, 3
     f82:	85 91       	lpm	r24, Z+
     f84:	93 ff       	sbrs	r25, 3
     f86:	81 91       	ld	r24, Z+
     f88:	7f 01       	movw	r14, r30
     f8a:	81 11       	cpse	r24, r1
     f8c:	b3 cf       	rjmp	.-154    	; 0xef4 <vfprintf+0x5c>
     f8e:	98 2f       	mov	r25, r24
     f90:	9f 7d       	andi	r25, 0xDF	; 223
     f92:	95 54       	subi	r25, 0x45	; 69
     f94:	93 30       	cpi	r25, 0x03	; 3
     f96:	28 f4       	brcc	.+10     	; 0xfa2 <vfprintf+0x10a>
     f98:	0c 5f       	subi	r16, 0xFC	; 252
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	9f e3       	ldi	r25, 0x3F	; 63
     f9e:	99 83       	std	Y+1, r25	; 0x01
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <vfprintf+0x124>
     fa2:	83 36       	cpi	r24, 0x63	; 99
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <vfprintf+0x11a>
     fa6:	83 37       	cpi	r24, 0x73	; 115
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <vfprintf+0x12e>
     faa:	83 35       	cpi	r24, 0x53	; 83
     fac:	09 f0       	breq	.+2      	; 0xfb0 <vfprintf+0x118>
     fae:	59 c0       	rjmp	.+178    	; 0x1062 <vfprintf+0x1ca>
     fb0:	21 c0       	rjmp	.+66     	; 0xff4 <vfprintf+0x15c>
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 81       	ld	r24, Z
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	0e 5f       	subi	r16, 0xFE	; 254
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	88 24       	eor	r8, r8
     fbe:	83 94       	inc	r8
     fc0:	91 2c       	mov	r9, r1
     fc2:	53 01       	movw	r10, r6
     fc4:	13 c0       	rjmp	.+38     	; 0xfec <vfprintf+0x154>
     fc6:	28 01       	movw	r4, r16
     fc8:	f2 e0       	ldi	r31, 0x02	; 2
     fca:	4f 0e       	add	r4, r31
     fcc:	51 1c       	adc	r5, r1
     fce:	f8 01       	movw	r30, r16
     fd0:	a0 80       	ld	r10, Z
     fd2:	b1 80       	ldd	r11, Z+1	; 0x01
     fd4:	36 fe       	sbrs	r3, 6
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <vfprintf+0x146>
     fd8:	69 2d       	mov	r22, r9
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <vfprintf+0x14a>
     fde:	6f ef       	ldi	r22, 0xFF	; 255
     fe0:	7f ef       	ldi	r23, 0xFF	; 255
     fe2:	c5 01       	movw	r24, r10
     fe4:	0e 94 38 09 	call	0x1270	; 0x1270 <strnlen>
     fe8:	4c 01       	movw	r8, r24
     fea:	82 01       	movw	r16, r4
     fec:	f3 2d       	mov	r31, r3
     fee:	ff 77       	andi	r31, 0x7F	; 127
     ff0:	3f 2e       	mov	r3, r31
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vfprintf+0x188>
     ff4:	28 01       	movw	r4, r16
     ff6:	22 e0       	ldi	r18, 0x02	; 2
     ff8:	42 0e       	add	r4, r18
     ffa:	51 1c       	adc	r5, r1
     ffc:	f8 01       	movw	r30, r16
     ffe:	a0 80       	ld	r10, Z
    1000:	b1 80       	ldd	r11, Z+1	; 0x01
    1002:	36 fe       	sbrs	r3, 6
    1004:	03 c0       	rjmp	.+6      	; 0x100c <vfprintf+0x174>
    1006:	69 2d       	mov	r22, r9
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x178>
    100c:	6f ef       	ldi	r22, 0xFF	; 255
    100e:	7f ef       	ldi	r23, 0xFF	; 255
    1010:	c5 01       	movw	r24, r10
    1012:	0e 94 2d 09 	call	0x125a	; 0x125a <strnlen_P>
    1016:	4c 01       	movw	r8, r24
    1018:	f3 2d       	mov	r31, r3
    101a:	f0 68       	ori	r31, 0x80	; 128
    101c:	3f 2e       	mov	r3, r31
    101e:	82 01       	movw	r16, r4
    1020:	33 fc       	sbrc	r3, 3
    1022:	1b c0       	rjmp	.+54     	; 0x105a <vfprintf+0x1c2>
    1024:	82 2d       	mov	r24, r2
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	88 16       	cp	r8, r24
    102a:	99 06       	cpc	r9, r25
    102c:	b0 f4       	brcc	.+44     	; 0x105a <vfprintf+0x1c2>
    102e:	b6 01       	movw	r22, r12
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    1038:	2a 94       	dec	r2
    103a:	f4 cf       	rjmp	.-24     	; 0x1024 <vfprintf+0x18c>
    103c:	f5 01       	movw	r30, r10
    103e:	37 fc       	sbrc	r3, 7
    1040:	85 91       	lpm	r24, Z+
    1042:	37 fe       	sbrs	r3, 7
    1044:	81 91       	ld	r24, Z+
    1046:	5f 01       	movw	r10, r30
    1048:	b6 01       	movw	r22, r12
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    1050:	21 10       	cpse	r2, r1
    1052:	2a 94       	dec	r2
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	82 1a       	sub	r8, r18
    1058:	91 08       	sbc	r9, r1
    105a:	81 14       	cp	r8, r1
    105c:	91 04       	cpc	r9, r1
    105e:	71 f7       	brne	.-36     	; 0x103c <vfprintf+0x1a4>
    1060:	e8 c0       	rjmp	.+464    	; 0x1232 <vfprintf+0x39a>
    1062:	84 36       	cpi	r24, 0x64	; 100
    1064:	11 f0       	breq	.+4      	; 0x106a <vfprintf+0x1d2>
    1066:	89 36       	cpi	r24, 0x69	; 105
    1068:	41 f5       	brne	.+80     	; 0x10ba <vfprintf+0x222>
    106a:	f8 01       	movw	r30, r16
    106c:	37 fe       	sbrs	r3, 7
    106e:	07 c0       	rjmp	.+14     	; 0x107e <vfprintf+0x1e6>
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	0c 5f       	subi	r16, 0xFC	; 252
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x1f6>
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	07 2e       	mov	r0, r23
    1084:	00 0c       	add	r0, r0
    1086:	88 0b       	sbc	r24, r24
    1088:	99 0b       	sbc	r25, r25
    108a:	0e 5f       	subi	r16, 0xFE	; 254
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	f3 2d       	mov	r31, r3
    1090:	ff 76       	andi	r31, 0x6F	; 111
    1092:	3f 2e       	mov	r3, r31
    1094:	97 ff       	sbrs	r25, 7
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <vfprintf+0x212>
    1098:	90 95       	com	r25
    109a:	80 95       	com	r24
    109c:	70 95       	com	r23
    109e:	61 95       	neg	r22
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	f0 68       	ori	r31, 0x80	; 128
    10a8:	3f 2e       	mov	r3, r31
    10aa:	2a e0       	ldi	r18, 0x0A	; 10
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	a3 01       	movw	r20, r6
    10b0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__ultoa_invert>
    10b4:	88 2e       	mov	r8, r24
    10b6:	86 18       	sub	r8, r6
    10b8:	45 c0       	rjmp	.+138    	; 0x1144 <vfprintf+0x2ac>
    10ba:	85 37       	cpi	r24, 0x75	; 117
    10bc:	31 f4       	brne	.+12     	; 0x10ca <vfprintf+0x232>
    10be:	23 2d       	mov	r18, r3
    10c0:	2f 7e       	andi	r18, 0xEF	; 239
    10c2:	b2 2e       	mov	r11, r18
    10c4:	2a e0       	ldi	r18, 0x0A	; 10
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	25 c0       	rjmp	.+74     	; 0x1114 <vfprintf+0x27c>
    10ca:	93 2d       	mov	r25, r3
    10cc:	99 7f       	andi	r25, 0xF9	; 249
    10ce:	b9 2e       	mov	r11, r25
    10d0:	8f 36       	cpi	r24, 0x6F	; 111
    10d2:	c1 f0       	breq	.+48     	; 0x1104 <vfprintf+0x26c>
    10d4:	18 f4       	brcc	.+6      	; 0x10dc <vfprintf+0x244>
    10d6:	88 35       	cpi	r24, 0x58	; 88
    10d8:	79 f0       	breq	.+30     	; 0x10f8 <vfprintf+0x260>
    10da:	b5 c0       	rjmp	.+362    	; 0x1246 <vfprintf+0x3ae>
    10dc:	80 37       	cpi	r24, 0x70	; 112
    10de:	19 f0       	breq	.+6      	; 0x10e6 <vfprintf+0x24e>
    10e0:	88 37       	cpi	r24, 0x78	; 120
    10e2:	21 f0       	breq	.+8      	; 0x10ec <vfprintf+0x254>
    10e4:	b0 c0       	rjmp	.+352    	; 0x1246 <vfprintf+0x3ae>
    10e6:	e9 2f       	mov	r30, r25
    10e8:	e0 61       	ori	r30, 0x10	; 16
    10ea:	be 2e       	mov	r11, r30
    10ec:	b4 fe       	sbrs	r11, 4
    10ee:	0d c0       	rjmp	.+26     	; 0x110a <vfprintf+0x272>
    10f0:	fb 2d       	mov	r31, r11
    10f2:	f4 60       	ori	r31, 0x04	; 4
    10f4:	bf 2e       	mov	r11, r31
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <vfprintf+0x272>
    10f8:	34 fe       	sbrs	r3, 4
    10fa:	0a c0       	rjmp	.+20     	; 0x1110 <vfprintf+0x278>
    10fc:	29 2f       	mov	r18, r25
    10fe:	26 60       	ori	r18, 0x06	; 6
    1100:	b2 2e       	mov	r11, r18
    1102:	06 c0       	rjmp	.+12     	; 0x1110 <vfprintf+0x278>
    1104:	28 e0       	ldi	r18, 0x08	; 8
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <vfprintf+0x27c>
    110a:	20 e1       	ldi	r18, 0x10	; 16
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x27c>
    1110:	20 e1       	ldi	r18, 0x10	; 16
    1112:	32 e0       	ldi	r19, 0x02	; 2
    1114:	f8 01       	movw	r30, r16
    1116:	b7 fe       	sbrs	r11, 7
    1118:	07 c0       	rjmp	.+14     	; 0x1128 <vfprintf+0x290>
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	0c 5f       	subi	r16, 0xFC	; 252
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <vfprintf+0x29c>
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 5f       	subi	r16, 0xFE	; 254
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	a3 01       	movw	r20, r6
    1136:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__ultoa_invert>
    113a:	88 2e       	mov	r8, r24
    113c:	86 18       	sub	r8, r6
    113e:	fb 2d       	mov	r31, r11
    1140:	ff 77       	andi	r31, 0x7F	; 127
    1142:	3f 2e       	mov	r3, r31
    1144:	36 fe       	sbrs	r3, 6
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <vfprintf+0x2ca>
    1148:	23 2d       	mov	r18, r3
    114a:	2e 7f       	andi	r18, 0xFE	; 254
    114c:	a2 2e       	mov	r10, r18
    114e:	89 14       	cp	r8, r9
    1150:	58 f4       	brcc	.+22     	; 0x1168 <vfprintf+0x2d0>
    1152:	34 fe       	sbrs	r3, 4
    1154:	0b c0       	rjmp	.+22     	; 0x116c <vfprintf+0x2d4>
    1156:	32 fc       	sbrc	r3, 2
    1158:	09 c0       	rjmp	.+18     	; 0x116c <vfprintf+0x2d4>
    115a:	83 2d       	mov	r24, r3
    115c:	8e 7e       	andi	r24, 0xEE	; 238
    115e:	a8 2e       	mov	r10, r24
    1160:	05 c0       	rjmp	.+10     	; 0x116c <vfprintf+0x2d4>
    1162:	b8 2c       	mov	r11, r8
    1164:	a3 2c       	mov	r10, r3
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x2d6>
    1168:	b8 2c       	mov	r11, r8
    116a:	01 c0       	rjmp	.+2      	; 0x116e <vfprintf+0x2d6>
    116c:	b9 2c       	mov	r11, r9
    116e:	a4 fe       	sbrs	r10, 4
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <vfprintf+0x2f8>
    1172:	fe 01       	movw	r30, r28
    1174:	e8 0d       	add	r30, r8
    1176:	f1 1d       	adc	r31, r1
    1178:	80 81       	ld	r24, Z
    117a:	80 33       	cpi	r24, 0x30	; 48
    117c:	21 f4       	brne	.+8      	; 0x1186 <vfprintf+0x2ee>
    117e:	9a 2d       	mov	r25, r10
    1180:	99 7e       	andi	r25, 0xE9	; 233
    1182:	a9 2e       	mov	r10, r25
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <vfprintf+0x300>
    1186:	a2 fe       	sbrs	r10, 2
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x2fe>
    118a:	b3 94       	inc	r11
    118c:	b3 94       	inc	r11
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <vfprintf+0x300>
    1190:	8a 2d       	mov	r24, r10
    1192:	86 78       	andi	r24, 0x86	; 134
    1194:	09 f0       	breq	.+2      	; 0x1198 <vfprintf+0x300>
    1196:	b3 94       	inc	r11
    1198:	a3 fc       	sbrc	r10, 3
    119a:	11 c0       	rjmp	.+34     	; 0x11be <vfprintf+0x326>
    119c:	a0 fe       	sbrs	r10, 0
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x314>
    11a0:	b2 14       	cp	r11, r2
    11a2:	88 f4       	brcc	.+34     	; 0x11c6 <vfprintf+0x32e>
    11a4:	28 0c       	add	r2, r8
    11a6:	92 2c       	mov	r9, r2
    11a8:	9b 18       	sub	r9, r11
    11aa:	0e c0       	rjmp	.+28     	; 0x11c8 <vfprintf+0x330>
    11ac:	b2 14       	cp	r11, r2
    11ae:	60 f4       	brcc	.+24     	; 0x11c8 <vfprintf+0x330>
    11b0:	b6 01       	movw	r22, r12
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    11ba:	b3 94       	inc	r11
    11bc:	f7 cf       	rjmp	.-18     	; 0x11ac <vfprintf+0x314>
    11be:	b2 14       	cp	r11, r2
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <vfprintf+0x330>
    11c2:	2b 18       	sub	r2, r11
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x332>
    11c6:	98 2c       	mov	r9, r8
    11c8:	21 2c       	mov	r2, r1
    11ca:	a4 fe       	sbrs	r10, 4
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <vfprintf+0x356>
    11ce:	b6 01       	movw	r22, r12
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    11d8:	a2 fe       	sbrs	r10, 2
    11da:	17 c0       	rjmp	.+46     	; 0x120a <vfprintf+0x372>
    11dc:	a1 fc       	sbrc	r10, 1
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <vfprintf+0x34e>
    11e0:	88 e7       	ldi	r24, 0x78	; 120
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <vfprintf+0x352>
    11e6:	88 e5       	ldi	r24, 0x58	; 88
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	b6 01       	movw	r22, r12
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <vfprintf+0x36e>
    11ee:	8a 2d       	mov	r24, r10
    11f0:	86 78       	andi	r24, 0x86	; 134
    11f2:	59 f0       	breq	.+22     	; 0x120a <vfprintf+0x372>
    11f4:	a1 fe       	sbrs	r10, 1
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <vfprintf+0x364>
    11f8:	8b e2       	ldi	r24, 0x2B	; 43
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <vfprintf+0x366>
    11fc:	80 e2       	ldi	r24, 0x20	; 32
    11fe:	a7 fc       	sbrc	r10, 7
    1200:	8d e2       	ldi	r24, 0x2D	; 45
    1202:	b6 01       	movw	r22, r12
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    120a:	89 14       	cp	r8, r9
    120c:	38 f4       	brcc	.+14     	; 0x121c <vfprintf+0x384>
    120e:	b6 01       	movw	r22, r12
    1210:	80 e3       	ldi	r24, 0x30	; 48
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    1218:	9a 94       	dec	r9
    121a:	f7 cf       	rjmp	.-18     	; 0x120a <vfprintf+0x372>
    121c:	8a 94       	dec	r8
    121e:	f3 01       	movw	r30, r6
    1220:	e8 0d       	add	r30, r8
    1222:	f1 1d       	adc	r31, r1
    1224:	80 81       	ld	r24, Z
    1226:	b6 01       	movw	r22, r12
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    122e:	81 10       	cpse	r8, r1
    1230:	f5 cf       	rjmp	.-22     	; 0x121c <vfprintf+0x384>
    1232:	22 20       	and	r2, r2
    1234:	09 f4       	brne	.+2      	; 0x1238 <vfprintf+0x3a0>
    1236:	42 ce       	rjmp	.-892    	; 0xebc <vfprintf+0x24>
    1238:	b6 01       	movw	r22, r12
    123a:	80 e2       	ldi	r24, 0x20	; 32
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 43 09 	call	0x1286	; 0x1286 <fputc>
    1242:	2a 94       	dec	r2
    1244:	f6 cf       	rjmp	.-20     	; 0x1232 <vfprintf+0x39a>
    1246:	f6 01       	movw	r30, r12
    1248:	86 81       	ldd	r24, Z+6	; 0x06
    124a:	97 81       	ldd	r25, Z+7	; 0x07
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x3ba>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	2b 96       	adiw	r28, 0x0b	; 11
    1254:	e2 e1       	ldi	r30, 0x12	; 18
    1256:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__epilogue_restores__>

0000125a <strnlen_P>:
    125a:	fc 01       	movw	r30, r24
    125c:	05 90       	lpm	r0, Z+
    125e:	61 50       	subi	r22, 0x01	; 1
    1260:	70 40       	sbci	r23, 0x00	; 0
    1262:	01 10       	cpse	r0, r1
    1264:	d8 f7       	brcc	.-10     	; 0x125c <strnlen_P+0x2>
    1266:	80 95       	com	r24
    1268:	90 95       	com	r25
    126a:	8e 0f       	add	r24, r30
    126c:	9f 1f       	adc	r25, r31
    126e:	08 95       	ret

00001270 <strnlen>:
    1270:	fc 01       	movw	r30, r24
    1272:	61 50       	subi	r22, 0x01	; 1
    1274:	70 40       	sbci	r23, 0x00	; 0
    1276:	01 90       	ld	r0, Z+
    1278:	01 10       	cpse	r0, r1
    127a:	d8 f7       	brcc	.-10     	; 0x1272 <strnlen+0x2>
    127c:	80 95       	com	r24
    127e:	90 95       	com	r25
    1280:	8e 0f       	add	r24, r30
    1282:	9f 1f       	adc	r25, r31
    1284:	08 95       	ret

00001286 <fputc>:
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	fb 01       	movw	r30, r22
    1290:	23 81       	ldd	r18, Z+3	; 0x03
    1292:	21 fd       	sbrc	r18, 1
    1294:	03 c0       	rjmp	.+6      	; 0x129c <fputc+0x16>
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	9f ef       	ldi	r25, 0xFF	; 255
    129a:	2c c0       	rjmp	.+88     	; 0x12f4 <fputc+0x6e>
    129c:	22 ff       	sbrs	r18, 2
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <fputc+0x46>
    12a0:	46 81       	ldd	r20, Z+6	; 0x06
    12a2:	57 81       	ldd	r21, Z+7	; 0x07
    12a4:	24 81       	ldd	r18, Z+4	; 0x04
    12a6:	35 81       	ldd	r19, Z+5	; 0x05
    12a8:	42 17       	cp	r20, r18
    12aa:	53 07       	cpc	r21, r19
    12ac:	44 f4       	brge	.+16     	; 0x12be <fputc+0x38>
    12ae:	a0 81       	ld	r26, Z
    12b0:	b1 81       	ldd	r27, Z+1	; 0x01
    12b2:	9d 01       	movw	r18, r26
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	31 83       	std	Z+1, r19	; 0x01
    12ba:	20 83       	st	Z, r18
    12bc:	8c 93       	st	X, r24
    12be:	26 81       	ldd	r18, Z+6	; 0x06
    12c0:	37 81       	ldd	r19, Z+7	; 0x07
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	37 83       	std	Z+7, r19	; 0x07
    12c8:	26 83       	std	Z+6, r18	; 0x06
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <fputc+0x6e>
    12cc:	8b 01       	movw	r16, r22
    12ce:	ec 01       	movw	r28, r24
    12d0:	fb 01       	movw	r30, r22
    12d2:	00 84       	ldd	r0, Z+8	; 0x08
    12d4:	f1 85       	ldd	r31, Z+9	; 0x09
    12d6:	e0 2d       	mov	r30, r0
    12d8:	09 95       	icall
    12da:	89 2b       	or	r24, r25
    12dc:	e1 f6       	brne	.-72     	; 0x1296 <fputc+0x10>
    12de:	d8 01       	movw	r26, r16
    12e0:	16 96       	adiw	r26, 0x06	; 6
    12e2:	8d 91       	ld	r24, X+
    12e4:	9c 91       	ld	r25, X
    12e6:	17 97       	sbiw	r26, 0x07	; 7
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	17 96       	adiw	r26, 0x07	; 7
    12ec:	9c 93       	st	X, r25
    12ee:	8e 93       	st	-X, r24
    12f0:	16 97       	sbiw	r26, 0x06	; 6
    12f2:	ce 01       	movw	r24, r28
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <__ultoa_invert>:
    12fe:	fa 01       	movw	r30, r20
    1300:	aa 27       	eor	r26, r26
    1302:	28 30       	cpi	r18, 0x08	; 8
    1304:	51 f1       	breq	.+84     	; 0x135a <__ultoa_invert+0x5c>
    1306:	20 31       	cpi	r18, 0x10	; 16
    1308:	81 f1       	breq	.+96     	; 0x136a <__ultoa_invert+0x6c>
    130a:	e8 94       	clt
    130c:	6f 93       	push	r22
    130e:	6e 7f       	andi	r22, 0xFE	; 254
    1310:	6e 5f       	subi	r22, 0xFE	; 254
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	af 4f       	sbci	r26, 0xFF	; 255
    131a:	b1 e0       	ldi	r27, 0x01	; 1
    131c:	3e d0       	rcall	.+124    	; 0x139a <__ultoa_invert+0x9c>
    131e:	b4 e0       	ldi	r27, 0x04	; 4
    1320:	3c d0       	rcall	.+120    	; 0x139a <__ultoa_invert+0x9c>
    1322:	67 0f       	add	r22, r23
    1324:	78 1f       	adc	r23, r24
    1326:	89 1f       	adc	r24, r25
    1328:	9a 1f       	adc	r25, r26
    132a:	a1 1d       	adc	r26, r1
    132c:	68 0f       	add	r22, r24
    132e:	79 1f       	adc	r23, r25
    1330:	8a 1f       	adc	r24, r26
    1332:	91 1d       	adc	r25, r1
    1334:	a1 1d       	adc	r26, r1
    1336:	6a 0f       	add	r22, r26
    1338:	71 1d       	adc	r23, r1
    133a:	81 1d       	adc	r24, r1
    133c:	91 1d       	adc	r25, r1
    133e:	a1 1d       	adc	r26, r1
    1340:	20 d0       	rcall	.+64     	; 0x1382 <__ultoa_invert+0x84>
    1342:	09 f4       	brne	.+2      	; 0x1346 <__ultoa_invert+0x48>
    1344:	68 94       	set
    1346:	3f 91       	pop	r19
    1348:	2a e0       	ldi	r18, 0x0A	; 10
    134a:	26 9f       	mul	r18, r22
    134c:	11 24       	eor	r1, r1
    134e:	30 19       	sub	r19, r0
    1350:	30 5d       	subi	r19, 0xD0	; 208
    1352:	31 93       	st	Z+, r19
    1354:	de f6       	brtc	.-74     	; 0x130c <__ultoa_invert+0xe>
    1356:	cf 01       	movw	r24, r30
    1358:	08 95       	ret
    135a:	46 2f       	mov	r20, r22
    135c:	47 70       	andi	r20, 0x07	; 7
    135e:	40 5d       	subi	r20, 0xD0	; 208
    1360:	41 93       	st	Z+, r20
    1362:	b3 e0       	ldi	r27, 0x03	; 3
    1364:	0f d0       	rcall	.+30     	; 0x1384 <__ultoa_invert+0x86>
    1366:	c9 f7       	brne	.-14     	; 0x135a <__ultoa_invert+0x5c>
    1368:	f6 cf       	rjmp	.-20     	; 0x1356 <__ultoa_invert+0x58>
    136a:	46 2f       	mov	r20, r22
    136c:	4f 70       	andi	r20, 0x0F	; 15
    136e:	40 5d       	subi	r20, 0xD0	; 208
    1370:	4a 33       	cpi	r20, 0x3A	; 58
    1372:	18 f0       	brcs	.+6      	; 0x137a <__ultoa_invert+0x7c>
    1374:	49 5d       	subi	r20, 0xD9	; 217
    1376:	31 fd       	sbrc	r19, 1
    1378:	40 52       	subi	r20, 0x20	; 32
    137a:	41 93       	st	Z+, r20
    137c:	02 d0       	rcall	.+4      	; 0x1382 <__ultoa_invert+0x84>
    137e:	a9 f7       	brne	.-22     	; 0x136a <__ultoa_invert+0x6c>
    1380:	ea cf       	rjmp	.-44     	; 0x1356 <__ultoa_invert+0x58>
    1382:	b4 e0       	ldi	r27, 0x04	; 4
    1384:	a6 95       	lsr	r26
    1386:	97 95       	ror	r25
    1388:	87 95       	ror	r24
    138a:	77 95       	ror	r23
    138c:	67 95       	ror	r22
    138e:	ba 95       	dec	r27
    1390:	c9 f7       	brne	.-14     	; 0x1384 <__ultoa_invert+0x86>
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 05       	cpc	r22, r1
    1396:	71 05       	cpc	r23, r1
    1398:	08 95       	ret
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
    139e:	0a 2e       	mov	r0, r26
    13a0:	06 94       	lsr	r0
    13a2:	57 95       	ror	r21
    13a4:	47 95       	ror	r20
    13a6:	37 95       	ror	r19
    13a8:	27 95       	ror	r18
    13aa:	ba 95       	dec	r27
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__ultoa_invert+0xa2>
    13ae:	62 0f       	add	r22, r18
    13b0:	73 1f       	adc	r23, r19
    13b2:	84 1f       	adc	r24, r20
    13b4:	95 1f       	adc	r25, r21
    13b6:	a0 1d       	adc	r26, r0
    13b8:	08 95       	ret

000013ba <__prologue_saves__>:
    13ba:	2f 92       	push	r2
    13bc:	3f 92       	push	r3
    13be:	4f 92       	push	r4
    13c0:	5f 92       	push	r5
    13c2:	6f 92       	push	r6
    13c4:	7f 92       	push	r7
    13c6:	8f 92       	push	r8
    13c8:	9f 92       	push	r9
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	ca 1b       	sub	r28, r26
    13e4:	db 0b       	sbc	r29, r27
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	09 94       	ijmp

000013f2 <__epilogue_restores__>:
    13f2:	2a 88       	ldd	r2, Y+18	; 0x12
    13f4:	39 88       	ldd	r3, Y+17	; 0x11
    13f6:	48 88       	ldd	r4, Y+16	; 0x10
    13f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    13fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    13fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    13fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1400:	9b 84       	ldd	r9, Y+11	; 0x0b
    1402:	aa 84       	ldd	r10, Y+10	; 0x0a
    1404:	b9 84       	ldd	r11, Y+9	; 0x09
    1406:	c8 84       	ldd	r12, Y+8	; 0x08
    1408:	df 80       	ldd	r13, Y+7	; 0x07
    140a:	ee 80       	ldd	r14, Y+6	; 0x06
    140c:	fd 80       	ldd	r15, Y+5	; 0x05
    140e:	0c 81       	ldd	r16, Y+4	; 0x04
    1410:	1b 81       	ldd	r17, Y+3	; 0x03
    1412:	aa 81       	ldd	r26, Y+2	; 0x02
    1414:	b9 81       	ldd	r27, Y+1	; 0x01
    1416:	ce 0f       	add	r28, r30
    1418:	d1 1d       	adc	r29, r1
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	ed 01       	movw	r28, r26
    1426:	08 95       	ret

00001428 <_exit>:
    1428:	f8 94       	cli

0000142a <__stop_program>:
    142a:	ff cf       	rjmp	.-2      	; 0x142a <__stop_program>
